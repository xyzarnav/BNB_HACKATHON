{
  "address": "0x5E45093075f938c49ac111dCfCC1e61670aC029f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressBlacklisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyBidded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorAlreadyAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidAlreadyEvaluated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidNotEvaluated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidderAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidderBlacklisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidderDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BondDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CreatorCannotBid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeAlreadyResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDescription",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyTitle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBidId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBudget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCompletionStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMilestone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProjectId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRiskScore",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTimePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MediatorAlreadyAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustSendFullAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAuditorsAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBidsAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLowRiskBidsAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAuditorCanApprove",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCreatorCanAward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCreatorCanRelease",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCreatorOrObligorCanDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMediatorCanResolve",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProjectAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProjectDisputed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProjectDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProjectLate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProjectNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProjectNotPosted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SelectedBidderBlacklisted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "milestone",
          "type": "uint8"
        }
      ],
      "name": "AuditorApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        }
      ],
      "name": "AuditorAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidderId",
          "type": "uint256"
        }
      ],
      "name": "BidderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPayment",
          "type": "uint256"
        }
      ],
      "name": "BondAwarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TrustChain.DisputeOutcome",
          "name": "outcome",
          "type": "uint8"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "recommendation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "MLRecommendationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mediator",
          "type": "address"
        }
      ],
      "name": "MediatorAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "newCompletion",
          "type": "uint8"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TrustChain.ProjectClassfication",
          "name": "projectType",
          "type": "uint8"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "riskScore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "riskCategory",
          "type": "string"
        }
      ],
      "name": "RiskAssessmentSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "TransparencyLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "reportHash",
          "type": "bytes32"
        }
      ],
      "name": "WhistleblowerReport",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "_milestone",
          "type": "uint8"
        }
      ],
      "name": "approveCompletion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedAuditors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedAuditorsList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "assignAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_mediator",
          "type": "address"
        }
      ],
      "name": "assignMediator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidWinner",
          "type": "uint256"
        }
      ],
      "name": "awardBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_bidWiner",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "bidEvaluation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "bidEvaluationWithML",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidRiskAssessments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "riskScore",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "riskCategory",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recommendation",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "mlModelVersion",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bidderAverageRisk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidderCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bidderIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidderRiskHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalBids",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reputationScore",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "blacklisted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proposalIPFHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidderId",
          "type": "uint256"
        }
      ],
      "name": "blacklistBidder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondWinners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_proposalIPFHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createBidder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "createDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timeperiod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_budget",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectClassfication",
          "name": "_jobType",
          "type": "uint8"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mediator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "evidence",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        },
        {
          "internalType": "enum TrustChain.DisputeOutcome",
          "name": "outcome",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "evaluatedbids",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllActiveProjects",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "budget",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "posted",
              "type": "bool"
            },
            {
              "internalType": "enum TrustChain.ProjectClassfication",
              "name": "projectType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "auditor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasAuditor",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustChain.Project[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProjects",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "budget",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "posted",
              "type": "bool"
            },
            {
              "internalType": "enum TrustChain.ProjectClassfication",
              "name": "projectType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "auditor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasAuditor",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustChain.Project[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "getBidderAverageRisk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "getBidderRiskHistory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "getBidsByUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bidId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "proposalIPFHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "accepted",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustChain.Bid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        }
      ],
      "name": "getBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        }
      ],
      "name": "getBondObligor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        }
      ],
      "name": "getBondProjectId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        }
      ],
      "name": "getBondStatus",
      "outputs": [
        {
          "internalType": "enum TrustChain.ProjectStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        }
      ],
      "name": "getCompletionLevel",
      "outputs": [
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "_completion",
          "type": "uint8"
        }
      ],
      "name": "getCompletionPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectBidWinner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_bidWinnerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectById",
      "outputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "posted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectClassfication",
          "name": "projectType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectLogs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "actor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "action",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct TrustChain.LogEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getProjectsByCreator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "budget",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "posted",
              "type": "bool"
            },
            {
              "internalType": "enum TrustChain.ProjectClassfication",
              "name": "projectType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "auditor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasAuditor",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustChain.Project[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "getRiskAssessment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "riskScore",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "riskCategory",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recommendation",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "mlModelVersion",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasBidded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "_milestone",
          "type": "uint8"
        }
      ],
      "name": "isMilestoneApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "isProjectLate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectAuditors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectBids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "posted",
          "type": "bool"
        },
        {
          "internalType": "enum TrustChain.ProjectClassfication",
          "name": "projectType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "hasAuditor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auditor",
          "type": "address"
        }
      ],
      "name": "registerAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "_newCompletion",
          "type": "uint8"
        }
      ],
      "name": "releasePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auditor",
          "type": "address"
        }
      ],
      "name": "removeAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "reportCorruption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.DisputeOutcome",
          "name": "_outcome",
          "type": "uint8"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_riskScore",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_riskCategory",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_recommendation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_mlModelVersion",
          "type": "string"
        }
      ],
      "name": "submitRiskAssessment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transparencyLogs",
      "outputs": [
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x012fded423d388f9329a990c48f85d81f09c82e024f9df44d96a69deb628ce58",
  "receipt": {
    "to": null,
    "from": "0x54ebbDDA8046b34D635a3B2B25297B01AcED554f",
    "contractAddress": "0x5E45093075f938c49ac111dCfCC1e61670aC029f",
    "transactionIndex": 0,
    "gasUsed": "4345174",
    "logsBloom": "0x
    "blockHash": "0xbb0a469aadf7d0a874020675f43a3b2c7f462f5b82aae084004a6bbaf67cf6b4",
    "transactionHash": "0x012fded423d388f9329a990c48f85d81f09c82e024f9df44d96a69deb628ce58",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 62775518,
        "transactionHash": "0x012fded423d388f9329a990c48f85d81f09c82e024f9df44d96a69deb628ce58",
        "address": "0x5E45093075f938c49ac111dCfCC1e61670aC029f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054ebbdda8046b34d635a3b2b25297b01aced554f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbb0a469aadf7d0a874020675f43a3b2c7f462f5b82aae084004a6bbaf67cf6b4"
      }
    ],
    "blockNumber": 62775518,
    "cumulativeGasUsed": "4345174",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1c55256462d9eecd433e0511f54a0f0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyBidded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidAlreadyEvaluated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidNotEvaluated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidderAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidderBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidderDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BondDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorCannotBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeAlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDescription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyTitle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBidId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBudget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCompletionStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMilestone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProjectId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRiskScore\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MediatorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustSendFullAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAuditorsAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBidsAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLowRiskBidsAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAuditorCanApprove\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCreatorCanAward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCreatorCanRelease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCreatorOrObligorCanDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMediatorCanResolve\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectDisputed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectLate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectNotPosted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SelectedBidderBlacklisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"milestone\",\"type\":\"uint8\"}],\"name\":\"AuditorApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"AuditorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidderId\",\"type\":\"uint256\"}],\"name\":\"BidderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPayment\",\"type\":\"uint256\"}],\"name\":\"BondAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TrustChain.DisputeOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recommendation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"MLRecommendationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"}],\"name\":\"MediatorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"newCompletion\",\"type\":\"uint8\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"riskCategory\",\"type\":\"string\"}],\"name\":\"RiskAssessmentSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"TransparencyLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reportHash\",\"type\":\"bytes32\"}],\"name\":\"WhistleblowerReport\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"_milestone\",\"type\":\"uint8\"}],\"name\":\"approveCompletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAuditors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedAuditorsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"assignAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mediator\",\"type\":\"address\"}],\"name\":\"assignMediator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidWinner\",\"type\":\"uint256\"}],\"name\":\"awardBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidWiner\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"bidEvaluation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"bidEvaluationWithML\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidRiskAssessments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"riskCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recommendation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"mlModelVersion\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidderAverageRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidderRiskHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalIPFHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidderId\",\"type\":\"uint256\"}],\"name\":\"blacklistBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_proposalIPFHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"createDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timeperiod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_budget\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"_jobType\",\"type\":\"uint8\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"evidence\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.DisputeOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"evaluatedbids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAuditor\",\"type\":\"bool\"}],\"internalType\":\"struct TrustChain.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAuditor\",\"type\":\"bool\"}],\"internalType\":\"struct TrustChain.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getBidderAverageRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getBidderRiskHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getBidsByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalIPFHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct TrustChain.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"}],\"name\":\"getBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"}],\"name\":\"getBondObligor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"}],\"name\":\"getBondProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"}],\"name\":\"getBondStatus\",\"outputs\":[{\"internalType\":\"enum TrustChain.ProjectStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"}],\"name\":\"getCompletionLevel\",\"outputs\":[{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"_completion\",\"type\":\"uint8\"}],\"name\":\"getCompletionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectBidWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidWinnerId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectLogs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TrustChain.LogEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getProjectsByCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAuditor\",\"type\":\"bool\"}],\"internalType\":\"struct TrustChain.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"getRiskAssessment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"riskCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recommendation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"mlModelVersion\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasBidded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"_milestone\",\"type\":\"uint8\"}],\"name\":\"isMilestoneApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"isProjectLate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectAuditors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAuditor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"registerAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"_newCompletion\",\"type\":\"uint8\"}],\"name\":\"releasePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"removeAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"reportCorruption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.DisputeOutcome\",\"name\":\"_outcome\",\"type\":\"uint8\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_riskScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_riskCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_recommendation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mlModelVersion\",\"type\":\"string\"}],\"name\":\"submitRiskAssessment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transparencyLogs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BuidlGuidl\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"bidEvaluationWithML(uint256)\":{\"details\":\"Override bid evaluation to include ML risk assessment\",\"params\":{\"_projectId\":\"The project ID\"}},\"getBidderAverageRisk(address)\":{\"details\":\"Get bidder's average risk score\",\"params\":{\"_bidder\":\"The bidder's address\"},\"returns\":{\"_0\":\"Average risk score\"}},\"getBidderRiskHistory(address)\":{\"details\":\"Get bidder's risk history\",\"params\":{\"_bidder\":\"The bidder's address\"},\"returns\":{\"_0\":\"Array of risk scores\"}},\"getRiskAssessment(uint256)\":{\"details\":\"Get risk assessment for a specific bid\",\"params\":{\"_bidId\":\"The ID of the bid\"},\"returns\":{\"approved\":\"Whether the assessment was approved\",\"mlModelVersion\":\"The version of the ML model used\",\"recommendation\":\"The ML recommendation\",\"riskCategory\":\"The risk category (Low/Medium/High)\",\"riskScore\":\"The risk score (0-100)\",\"timestamp\":\"When the assessment was created\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"submitRiskAssessment(uint256,uint256,string,string,string)\":{\"details\":\"Submit ML risk assessment for a bid\",\"params\":{\"_bidId\":\"The ID of the bid to assess\",\"_mlModelVersion\":\"Version of ML model used\",\"_recommendation\":\"ML recommendation\",\"_riskCategory\":\"Risk category (Low/Medium/High)\",\"_riskScore\":\"Risk score from 0-100\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrustChain.sol\":\"TrustChain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/TrustChain.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n// Custom errors to reduce contract size\\r\\nerror InvalidBidId();\\r\\nerror InvalidRiskScore();\\r\\nerror BidDoesNotExist();\\r\\nerror ProjectDoesNotExist();\\r\\nerror BidAlreadyEvaluated();\\r\\nerror NoBidsAvailable();\\r\\nerror NoLowRiskBidsAvailable();\\r\\nerror BidderAlreadyExists();\\r\\nerror BidderBlacklisted();\\r\\nerror AddressBlacklisted();\\r\\nerror EmptyDescription();\\r\\nerror EmptyTitle();\\r\\nerror InvalidTimePeriod();\\r\\nerror InvalidBudget();\\r\\nerror NoAuditorsAvailable();\\r\\nerror AuditorAlreadyAssigned();\\r\\nerror AuditorNotRegistered();\\r\\nerror AlreadyBidded();\\r\\nerror CreatorCannotBid();\\r\\nerror BidderDoesNotExist();\\r\\nerror ProjectNotPosted();\\r\\nerror ProjectLate();\\r\\nerror InvalidAmount();\\r\\nerror OnlyCreatorCanAward();\\r\\nerror MustSendFullAmount();\\r\\nerror SelectedBidderBlacklisted();\\r\\nerror BondDoesNotExist();\\r\\nerror ProjectNotApproved();\\r\\nerror OnlyAuditorCanApprove();\\r\\nerror InvalidMilestone();\\r\\nerror ProjectAlreadyCompleted();\\r\\nerror ProjectDisputed();\\r\\nerror OnlyCreatorCanRelease();\\r\\nerror InvalidCompletionStatus();\\r\\nerror MilestoneNotApproved();\\r\\nerror OnlyCreatorOrObligorCanDispute();\\r\\nerror DisputeAlreadyResolved();\\r\\nerror MediatorAlreadyAssigned();\\r\\nerror OnlyMediatorCanResolve();\\r\\nerror InvalidProjectId();\\r\\nerror BidNotEvaluated();\\r\\n\\r\\n/**\\r\\n * A smart contract that allows changing a state variable of the contract and tracking the changes\\r\\n * It also allows the owner to withdraw the Ether in the contract\\r\\n * @author BuidlGuidl\\r\\n */\\r\\ncontract TrustChain is Ownable, ReentrancyGuard {\\r\\n    constructor() Ownable(msg.sender) {}\\r\\n\\r\\n    // Events\\r\\n    event BidderCreated(address indexed bidder, uint256 bidderId);\\r\\n    event ProjectCreated(uint256 indexed projectId, address creator, uint256 budget, ProjectClassfication projectType);\\r\\n    event BidSubmitted(uint256 indexed bidId, uint256 projectId, address bidder, uint256 amount);\\r\\n    event BondAwarded(uint256 indexed projectId, address bidder, uint256 amount, uint256 initialPayment);\\r\\n    event PaymentReleased(uint256 indexed bondId, uint256 amount, ProjectCompletion newCompletion);\\r\\n    // New transparency events\\r\\n    event AuditorAssigned(uint256 indexed projectId, address auditor);\\r\\n    event AuditorApproval(uint256 indexed bondId, ProjectCompletion milestone);\\r\\n    event MediatorAssigned(uint256 indexed disputeId, address mediator);\\r\\n    event DisputeResolved(uint256 indexed disputeId, DisputeOutcome outcome);\\r\\n    event WhistleblowerReport(uint256 indexed projectId, bytes32 reportHash);\\r\\n    event TransparencyLog(uint256 indexed projectId, string action, address actor);\\r\\n    // ML Risk Assessment events\\r\\n    event RiskAssessmentSubmitted(uint256 indexed bidId, address indexed bidder, uint256 riskScore, string riskCategory);\\r\\n    event MLRecommendationUpdated(uint256 indexed bidId, string recommendation, bool approved);\\r\\n\\r\\n    uint256 public version = 4;\\r\\n    uint256 public projectId = 0;\\r\\n    uint256 public bidCount = 0;\\r\\n    uint256 public bondCount = 0;\\r\\n    uint256 public disputeCount = 0;\\r\\n    \\r\\n    // ML Risk Assessment tracking\\r\\n    mapping(uint256 => RiskAssessment) public bidRiskAssessments; // bidId => RiskAssessment\\r\\n    mapping(address => uint256[]) public bidderRiskHistory; // bidder => array of risk scores\\r\\n    mapping(address => uint256) public bidderAverageRisk; // bidder => average risk score\\r\\n\\r\\n    struct Project {\\r\\n        address creator;\\r\\n        uint256 projectId;\\r\\n        string description;\\r\\n        string title;\\r\\n        uint256 timePeriod;\\r\\n        uint256 deadline;\\r\\n        uint256 budget;\\r\\n        bool posted;\\r\\n        ProjectClassfication projectType;\\r\\n        address auditor; // Independent auditor to verify milestones\\r\\n        bool hasAuditor;\\r\\n    }\\r\\n\\r\\n    struct Bid {\\r\\n        uint256 bidId;\\r\\n        uint256 projectId;\\r\\n        address bidder;\\r\\n        uint amount;\\r\\n        string proposalIPFHash;\\r\\n        bool accepted;\\r\\n    }\\r\\n\\r\\n    struct Bidder {\\r\\n        uint bidderId;\\r\\n        address bidderAddress;\\r\\n        uint256 totalBids;\\r\\n        uint256 reputationScore;\\r\\n        bool blacklisted; // For bidders caught in corrupt activities\\r\\n    }\\r\\n\\r\\n    struct Bond {\\r\\n        address obligor;\\r\\n        uint projectId;\\r\\n        uint amount;\\r\\n        ProjectStatus status;\\r\\n        ProjectCompletion completion;\\r\\n        mapping(address => bool) approvals; // Multi-signature approvals\\r\\n        uint256 requiredApprovals;\\r\\n        uint256 currentApprovals;\\r\\n        mapping(ProjectCompletion => bool) milestoneApproved; // Track which milestones are approved\\r\\n    }\\r\\n\\r\\n    struct Dispute {\\r\\n        uint256 disputeId;\\r\\n        uint256 bondId;\\r\\n        address creator;\\r\\n        address mediator;\\r\\n        string evidence;\\r\\n        bool resolved;\\r\\n        DisputeOutcome outcome;\\r\\n    }\\r\\n    \\r\\n    struct RiskAssessment {\\r\\n        uint256 bidId;\\r\\n        address bidder;\\r\\n        uint256 riskScore; // 0-100 scale\\r\\n        string riskCategory; // \\\"Low\\\", \\\"Medium\\\", \\\"High\\\"\\r\\n        string recommendation;\\r\\n        uint256 timestamp;\\r\\n        bool approved;\\r\\n        string mlModelVersion;\\r\\n    }\\r\\n\\r\\n    enum ProjectStatus {\\r\\n        Approved,\\r\\n        Completed,\\r\\n        Disputed\\r\\n    }\\r\\n\\r\\n    enum ProjectClassfication {\\r\\n        MaxRate,\\r\\n        FixRate,\\r\\n        MinRate\\r\\n    }\\r\\n\\r\\n    enum ProjectCompletion {\\r\\n        Signed, // 20%\\r\\n        Quarter, // 40%\\r\\n        Half, // 60%\\r\\n        ThreeQuarters, // 80%\\r\\n        Full // 100%\\r\\n    }\\r\\n\\r\\n    enum DisputeOutcome {\\r\\n        Pending,\\r\\n        RuledForCreator,\\r\\n        RuledForObligor,\\r\\n        Compromise\\r\\n    }\\r\\n\\r\\n    uint256 public bidderCount;\\r\\n    mapping(uint256 => Project) public projects;\\r\\n    mapping(uint256 => Bid) public bids;\\r\\n    mapping(uint256 => Bidder) public bidders;\\r\\n    mapping(uint256 => uint256[]) public projectBids;\\r\\n    mapping(address => uint256) public bidderIds;\\r\\n    mapping(uint256 => Dispute) public disputes;\\r\\n\\r\\n    // Mapping for Bond struct with nested mapping\\r\\n    mapping(uint256 => address) private bondObligor;\\r\\n    mapping(uint256 => uint256) private bondProjectId;\\r\\n    mapping(uint256 => uint256) private bondAmount;\\r\\n    mapping(uint256 => ProjectStatus) private bondStatus;\\r\\n    mapping(uint256 => ProjectCompletion) private bondCompletion;\\r\\n    // New mapping to track milestone approvals\\r\\n    mapping(uint256 => mapping(ProjectCompletion => bool)) private bondMilestoneApproved;\\r\\n    mapping(address => mapping(uint256 => bool)) public hasBidded;\\r\\n    // Auditor system\\r\\n    mapping(address => bool) public approvedAuditors;\\r\\n    mapping(uint256 => address[]) public projectAuditors;\\r\\n    // BidEvaluation\\r\\n    mapping(uint256 => bool) public evaluatedbids;\\r\\n    // Bond Winners\\r\\n    mapping(uint256 => uint256) public bondWinners;\\r\\n    // Whistleblower system\\r\\n    mapping(bytes32 => string) private reportDescriptions;\\r\\n    mapping(bytes32 => bool) private whistleblowerReports;\\r\\n    mapping(bytes32 => uint256) private whistleblowerRewards;\\r\\n\\r\\n    // Transparency log\\r\\n    struct LogEntry {\\r\\n        address actor;\\r\\n        string action;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n    mapping(uint256 => LogEntry[]) public transparencyLogs;\\r\\n\\r\\n    // Create a log entry for important actions\\r\\n    function _createLog(uint256 _projectId, string memory _action) private {\\r\\n        transparencyLogs[_projectId].push(LogEntry({ actor: msg.sender, action: _action, timestamp: block.timestamp }));\\r\\n        emit TransparencyLog(_projectId, _action, msg.sender);\\r\\n    }\\r\\n    // Add this state variable to the contract\\r\\n    address[] public approvedAuditorsList;\\r\\n    // Register as an approved auditor\\r\\n    function registerAuditor(address _auditor) public onlyOwner {\\r\\n        if (approvedAuditors[_auditor]) revert AuditorAlreadyAssigned();\\r\\n        approvedAuditors[_auditor] = true;\\r\\n        approvedAuditorsList.push(_auditor);\\r\\n    }\\r\\n\\r\\n    function removeAuditor(address _auditor) public onlyOwner {\\r\\n        if (!approvedAuditors[_auditor]) revert AuditorNotRegistered();\\r\\n        approvedAuditors[_auditor] = false;\\r\\n\\r\\n        // Remove from the array\\r\\n        for (uint i = 0; i < approvedAuditorsList.length; i++) {\\r\\n            if (approvedAuditorsList[i] == _auditor) {\\r\\n                // Replace with the last element and pop\\r\\n                approvedAuditorsList[i] = approvedAuditorsList[approvedAuditorsList.length - 1];\\r\\n                approvedAuditorsList.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createBidder() public {\\r\\n        if (bidderIds[msg.sender] != 0) revert BidderAlreadyExists();\\r\\n        if (bidders[bidderIds[msg.sender]].blacklisted) revert AddressBlacklisted();\\r\\n        bidderCount++;\\r\\n        bidderIds[msg.sender] = bidderCount;\\r\\n        bidders[bidderCount] = Bidder({\\r\\n            bidderId: bidderCount,\\r\\n            bidderAddress: msg.sender,\\r\\n            totalBids: 0,\\r\\n            reputationScore: 0,\\r\\n            blacklisted: false\\r\\n        });\\r\\n        emit BidderCreated(msg.sender, bidderCount);\\r\\n    }\\r\\n\\r\\n    function createProject(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint256 _timeperiod,\\r\\n        uint _budget,\\r\\n        ProjectClassfication _jobType\\r\\n    ) public {\\r\\n        if (bytes(_description).length == 0) revert EmptyDescription();\\r\\n        if (bytes(_title).length == 0) revert EmptyTitle();\\r\\n        if (_timeperiod == 0) revert InvalidTimePeriod();\\r\\n        if (_budget == 0) revert InvalidBudget();\\r\\n\\r\\n        projectId++;\\r\\n        projects[projectId] = Project({\\r\\n            creator: msg.sender,\\r\\n            projectId: projectId,\\r\\n            description: _description,\\r\\n            budget: _budget,\\r\\n            title: _title,\\r\\n            timePeriod: _timeperiod,\\r\\n            deadline: block.timestamp + _timeperiod,\\r\\n            posted: true,\\r\\n            projectType: _jobType,\\r\\n            auditor: address(0),\\r\\n            hasAuditor: false\\r\\n        });\\r\\n\\r\\n        emit ProjectCreated(projectId, msg.sender, _budget, _jobType);\\r\\n\\r\\n        _createLog(projectId, \\\"PROJECT_CREATED\\\");\\r\\n    }\\r\\n\\r\\n    // Assign an auditor to an existing project\\r\\n    function assignAuditor(uint256 _projectId) public {\\r\\n        Project storage project = projects[_projectId];\\r\\n        if (msg.sender != project.creator) revert OnlyCreatorCanAward();\\r\\n        if (approvedAuditorsList.length == 0) revert NoAuditorsAvailable();\\r\\n        if (project.hasAuditor) revert AuditorAlreadyAssigned();\\r\\n\\r\\n        // Generate a pseudorandom number for auditor selection\\r\\n        uint256 randomIndex = uint256(\\r\\n            keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender, _projectId))\\r\\n        ) % approvedAuditorsList.length;\\r\\n\\r\\n        // Assign the randomly selected auditor\\r\\n        address selectedAuditor = approvedAuditorsList[randomIndex];\\r\\n        project.auditor = selectedAuditor;\\r\\n        project.hasAuditor = true;\\r\\n\\r\\n        emit AuditorAssigned(_projectId, selectedAuditor);\\r\\n        _createLog(_projectId, \\\"AUDITOR_ASSIGNED\\\");\\r\\n    }\\r\\n\\r\\n    // Whistleblower function to report corruption\\r\\n    function reportCorruption(uint256 _projectId, string memory _evidence) public {\\r\\n        bytes32 reportHash = keccak256(abi.encodePacked(_projectId, msg.sender, _evidence));\\r\\n        whistleblowerReports[reportHash] = true;\\r\\n        reportDescriptions[reportHash] = _evidence; // Store the evidence\\r\\n        emit WhistleblowerReport(_projectId, reportHash);\\r\\n        _createLog(_projectId, \\\"CORRUPTION_REPORTED\\\");\\r\\n    }\\r\\n    // //function to view the report description\\r\\n    // function getWhistleblowerReport(uint256 _projectId, string memory _evidence) public view returns (string memory) {\\r\\n    //     bytes32 reportHash = keccak256(abi.encodePacked(_projectId, msg.sender, _evidence));\\r\\n    //     require(whistleblowerReports[reportHash], \\\"Report does not exist\\\");\\r\\n    //     return reportDescriptions[reportHash];\\r\\n    // }\\r\\n    // Allow contract owner to blacklist a bidder\\r\\n    function blacklistBidder(uint256 _bidderId) public onlyOwner {\\r\\n        bidders[_bidderId].blacklisted = true;\\r\\n        _createLog(0, \\\"BIDDER_BLACKLISTED\\\");\\r\\n    }\\r\\n\\r\\n    // Function to verify if a project is past deadline\\r\\n    function isProjectLate(uint256 _projectId) public view returns (bool) {\\r\\n        return block.timestamp > projects[_projectId].deadline;\\r\\n    }\\r\\n    \\r\\n    // ML Risk Assessment Functions\\r\\n    \\r\\n    /**\\r\\n     * @dev Submit ML risk assessment for a bid\\r\\n     * @param _bidId The ID of the bid to assess\\r\\n     * @param _riskScore Risk score from 0-100\\r\\n     * @param _riskCategory Risk category (Low/Medium/High)\\r\\n     * @param _recommendation ML recommendation\\r\\n     * @param _mlModelVersion Version of ML model used\\r\\n     */\\r\\n    function submitRiskAssessment(\\r\\n        uint256 _bidId,\\r\\n        uint256 _riskScore,\\r\\n        string memory _riskCategory,\\r\\n        string memory _recommendation,\\r\\n        string memory _mlModelVersion\\r\\n    ) public {\\r\\n        if (_bidId == 0 || _bidId > bidCount) revert InvalidBidId();\\r\\n        if (_riskScore > 100) revert InvalidRiskScore();\\r\\n        if (bids[_bidId].bidId != _bidId) revert BidDoesNotExist();\\r\\n        \\r\\n        address bidder = bids[_bidId].bidder;\\r\\n        \\r\\n        // Create risk assessment\\r\\n        RiskAssessment memory assessment = RiskAssessment({\\r\\n            bidId: _bidId,\\r\\n            bidder: bidder,\\r\\n            riskScore: _riskScore,\\r\\n            riskCategory: _riskCategory,\\r\\n            recommendation: _recommendation,\\r\\n            timestamp: block.timestamp,\\r\\n            approved: _riskScore < 70, // Auto-approve if risk < 70\\r\\n            mlModelVersion: _mlModelVersion\\r\\n        });\\r\\n        \\r\\n        bidRiskAssessments[_bidId] = assessment;\\r\\n        \\r\\n        // Update bidder risk history\\r\\n        bidderRiskHistory[bidder].push(_riskScore);\\r\\n        \\r\\n        // Update average risk score\\r\\n        uint256[] memory history = bidderRiskHistory[bidder];\\r\\n        uint256 totalRisk = 0;\\r\\n        for (uint256 i = 0; i < history.length; i++) {\\r\\n            totalRisk += history[i];\\r\\n        }\\r\\n        bidderAverageRisk[bidder] = totalRisk / history.length;\\r\\n        \\r\\n        emit RiskAssessmentSubmitted(_bidId, bidder, _riskScore, _riskCategory);\\r\\n        \\r\\n        // Auto-update recommendation if high risk\\r\\n        if (_riskScore >= 70) {\\r\\n            emit MLRecommendationUpdated(_bidId, _recommendation, false);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get risk assessment for a specific bid\\r\\n     * @param _bidId The ID of the bid\\r\\n     * @return riskScore The risk score (0-100)\\r\\n     * @return riskCategory The risk category (Low/Medium/High)\\r\\n     * @return recommendation The ML recommendation\\r\\n     * @return timestamp When the assessment was created\\r\\n     * @return approved Whether the assessment was approved\\r\\n     * @return mlModelVersion The version of the ML model used\\r\\n     */\\r\\n    function getRiskAssessment(uint256 _bidId) public view returns (\\r\\n        uint256 riskScore,\\r\\n        string memory riskCategory,\\r\\n        string memory recommendation,\\r\\n        uint256 timestamp,\\r\\n        bool approved,\\r\\n        string memory mlModelVersion\\r\\n    ) {\\r\\n        RiskAssessment memory assessment = bidRiskAssessments[_bidId];\\r\\n        return (\\r\\n            assessment.riskScore,\\r\\n            assessment.riskCategory,\\r\\n            assessment.recommendation,\\r\\n            assessment.timestamp,\\r\\n            assessment.approved,\\r\\n            assessment.mlModelVersion\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get bidder's average risk score\\r\\n     * @param _bidder The bidder's address\\r\\n     * @return Average risk score\\r\\n     */\\r\\n    function getBidderAverageRisk(address _bidder) public view returns (uint256) {\\r\\n        return bidderAverageRisk[_bidder];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get bidder's risk history\\r\\n     * @param _bidder The bidder's address\\r\\n     * @return Array of risk scores\\r\\n     */\\r\\n    function getBidderRiskHistory(address _bidder) public view returns (uint256[] memory) {\\r\\n        return bidderRiskHistory[_bidder];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Override bid evaluation to include ML risk assessment\\r\\n     * @param _projectId The project ID\\r\\n     */\\r\\n    function bidEvaluationWithML(uint256 _projectId) public {\\r\\n        Project storage pj = projects[_projectId];\\r\\n        if (!pj.posted) revert ProjectNotPosted();\\r\\n        if (projects[_projectId].creator == address(0)) revert ProjectDoesNotExist();\\r\\n        if (evaluatedbids[_projectId]) revert BidAlreadyEvaluated();\\r\\n        \\r\\n        uint256[] memory bidIds = projectBids[_projectId];\\r\\n        if (bidIds.length == 0) revert NoBidsAvailable();\\r\\n        \\r\\n        // Filter bids based on ML risk assessment\\r\\n        uint256[] memory lowRiskBids = new uint256[](bidIds.length);\\r\\n        uint256 lowRiskCount = 0;\\r\\n        \\r\\n        for (uint256 i = 0; i < bidIds.length; i++) {\\r\\n            uint256 bidId = bidIds[i];\\r\\n            RiskAssessment memory assessment = bidRiskAssessments[bidId];\\r\\n            \\r\\n            // Only consider bids with low or medium risk\\r\\n            if (assessment.riskScore < 70) {\\r\\n                lowRiskBids[lowRiskCount] = bidId;\\r\\n                lowRiskCount++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (lowRiskCount == 0) revert NoLowRiskBidsAvailable();\\r\\n        \\r\\n        // Evaluate remaining bids using original logic\\r\\n        uint256 winnerBidId = 0;\\r\\n        \\r\\n        if (pj.projectType == ProjectClassfication.MinRate) {\\r\\n            uint256 minBidAmount = type(uint256).max;\\r\\n            uint256[] memory tiedBids = new uint256[](lowRiskCount);\\r\\n            uint256 tiedCount = 0;\\r\\n            \\r\\n            for (uint256 i = 0; i < lowRiskCount; i++) {\\r\\n                uint256 currentBidId = lowRiskBids[i];\\r\\n                uint256 currentBidAmount = bids[currentBidId].amount;\\r\\n                \\r\\n                if (currentBidAmount < minBidAmount) {\\r\\n                    minBidAmount = currentBidAmount;\\r\\n                    tiedCount = 1;\\r\\n                    tiedBids[0] = currentBidId;\\r\\n                } else if (currentBidAmount == minBidAmount) {\\r\\n                    tiedBids[tiedCount] = currentBidId;\\r\\n                    tiedCount++;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) % tiedCount;\\r\\n            winnerBidId = tiedBids[randomIndex];\\r\\n        } else if (pj.projectType == ProjectClassfication.MaxRate) {\\r\\n            uint256 maxBidAmount = 0;\\r\\n            uint256[] memory tiedBids = new uint256[](lowRiskCount);\\r\\n            uint256 tiedCount = 0;\\r\\n            \\r\\n            for (uint256 i = 0; i < lowRiskCount; i++) {\\r\\n                uint256 currentBidId = lowRiskBids[i];\\r\\n                uint256 currentBidAmount = bids[currentBidId].amount;\\r\\n                \\r\\n                if (currentBidAmount > maxBidAmount) {\\r\\n                    maxBidAmount = currentBidAmount;\\r\\n                    tiedCount = 1;\\r\\n                    tiedBids[0] = currentBidId;\\r\\n                } else if (currentBidAmount == maxBidAmount) {\\r\\n                    tiedBids[tiedCount] = currentBidId;\\r\\n                    tiedCount++;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) % tiedCount;\\r\\n            winnerBidId = tiedBids[randomIndex];\\r\\n        } else if (pj.projectType == ProjectClassfication.FixRate) {\\r\\n            uint256 random = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)));\\r\\n            winnerBidId = lowRiskBids[random % lowRiskCount];\\r\\n        }\\r\\n        \\r\\n        evaluatedbids[_projectId] = true;\\r\\n        bondWinners[_projectId] = winnerBidId;\\r\\n        \\r\\n        _createLog(_projectId, \\\"BID_EVALUATED_WITH_ML\\\");\\r\\n    }\\r\\n\\r\\n    // Rest of existing functions with security and anti-corruption enhancements\\r\\n\\r\\n    function createBid(uint256 _projectId, string memory _proposalIPFHash, uint256 _amount) public {\\r\\n        Project storage pj = projects[_projectId];\\r\\n        Bidder storage bidder = bidders[bidderIds[msg.sender]];\\r\\n\\r\\n        // Add check for existing bid from this address\\r\\n        if (hasBidded[msg.sender][_projectId]) revert AlreadyBidded();\\r\\n\\r\\n        if (bidder.blacklisted) revert BidderBlacklisted();\\r\\n        if (pj.creator == msg.sender) revert CreatorCannotBid();\\r\\n        if (bidderIds[msg.sender] == 0) revert BidderDoesNotExist();\\r\\n        if (!pj.posted) revert ProjectNotPosted();\\r\\n        if (projects[_projectId].creator == address(0)) revert ProjectDoesNotExist();\\r\\n        if (isProjectLate(_projectId)) revert ProjectLate();\\r\\n\\r\\n        bidCount++;\\r\\n        if (pj.projectType == ProjectClassfication.FixRate) {\\r\\n            if (_amount != pj.budget) revert InvalidAmount();\\r\\n        }\\r\\n\\r\\n        bids[bidCount] = Bid({\\r\\n            bidId: bidCount,\\r\\n            projectId: _projectId,\\r\\n            bidder: msg.sender,\\r\\n            amount: _amount,\\r\\n            proposalIPFHash: _proposalIPFHash,\\r\\n            accepted: false\\r\\n        });\\r\\n\\r\\n        // Mark that this address has bidded for this project\\r\\n        hasBidded[msg.sender][_projectId] = true;\\r\\n\\r\\n        projectBids[_projectId].push(bidCount);\\r\\n        bidder.totalBids++;\\r\\n\\r\\n        emit BidSubmitted(bidCount, _projectId, msg.sender, _amount);\\r\\n        _createLog(_projectId, \\\"BID_SUBMITTED\\\");\\r\\n    }\\r\\n\\r\\n    // Existing bidEvaluation function remains mostly unchanged\\r\\n    function bidEvaluation(uint256 _projectId) public {\\r\\n        Project storage pj = projects[_projectId];\\r\\n        if (!pj.posted) revert ProjectNotPosted();\\r\\n        if (projects[_projectId].creator == address(0)) revert ProjectDoesNotExist();\\r\\n        if (evaluatedbids[_projectId]) revert BidAlreadyEvaluated();\\r\\n        uint256[] memory bidIds = projectBids[_projectId];\\r\\n        if (bidIds.length == 0) revert NoBidsAvailable();\\r\\n        uint256 winnerBidId = 0;\\r\\n\\r\\n        if (pj.projectType == ProjectClassfication.FixRate) {\\r\\n            uint256 random = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)));\\r\\n            evaluatedbids[_projectId] = true;\\r\\n            winnerBidId = bidIds[random % bidIds.length];\\r\\n            bondWinners[_projectId] = winnerBidId;\\r\\n            return;\\r\\n        } else if (pj.projectType == ProjectClassfication.MinRate) {\\r\\n            uint256 minBidAmount = type(uint256).max;\\r\\n            uint256[] memory tiedBids = new uint256[](bidIds.length);\\r\\n            uint256 tiedCount = 0;\\r\\n\\r\\n            for (uint256 i = 0; i < bidIds.length; i++) {\\r\\n                uint256 currentBidId = bidIds[i];\\r\\n                uint256 currentBidAmount = bids[currentBidId].amount;\\r\\n\\r\\n                if (currentBidAmount < minBidAmount) {\\r\\n                    minBidAmount = currentBidAmount;\\r\\n                    tiedCount = 1;\\r\\n                    tiedBids[0] = currentBidId;\\r\\n                } else if (currentBidAmount == minBidAmount) {\\r\\n                    tiedBids[tiedCount] = currentBidId;\\r\\n                    tiedCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) %\\r\\n                tiedCount;\\r\\n            evaluatedbids[_projectId] = true;\\r\\n            winnerBidId = tiedBids[randomIndex];\\r\\n            bondWinners[_projectId] = winnerBidId;\\r\\n            return;\\r\\n        } else if (pj.projectType == ProjectClassfication.MaxRate) {\\r\\n            uint256 maxBidAmount = 0;\\r\\n            uint256[] memory tiedBids = new uint256[](bidIds.length);\\r\\n            uint256 tiedCount = 0;\\r\\n\\r\\n            for (uint256 i = 0; i < bidIds.length; i++) {\\r\\n                uint256 currentBidId = bidIds[i];\\r\\n                uint256 currentBidAmount = bids[currentBidId].amount;\\r\\n\\r\\n                if (currentBidAmount > maxBidAmount) {\\r\\n                    maxBidAmount = currentBidAmount;\\r\\n                    tiedCount = 1;\\r\\n                    tiedBids[0] = currentBidId;\\r\\n                } else if (currentBidAmount == maxBidAmount) {\\r\\n                    tiedBids[tiedCount] = currentBidId;\\r\\n                    tiedCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) %\\r\\n                tiedCount;\\r\\n            evaluatedbids[_projectId] = true;\\r\\n            winnerBidId = tiedBids[randomIndex];\\r\\n            bondWinners[_projectId] = winnerBidId;\\r\\n            return;\\r\\n        } else {\\r\\n            revert(\\\"Unsupported project type\\\");\\r\\n        }\\r\\n    }\\r\\n    function awardBond(uint256 _projectId, uint256 bidWinner) public payable nonReentrant returns (uint256 _bidWiner) {\\r\\n        bondCount++;\\r\\n        Bid storage bd = bids[bidWinner];\\r\\n        Project storage pj = projects[_projectId];\\r\\n\\r\\n        if (!pj.posted) revert ProjectNotPosted();\\r\\n        if (msg.sender != pj.creator) revert OnlyCreatorCanAward();\\r\\n        if (msg.value != bd.amount) revert MustSendFullAmount();\\r\\n        if (bidders[bidderIds[bd.bidder]].blacklisted) revert SelectedBidderBlacklisted();\\r\\n\\r\\n        // Bond storage with mappings\\r\\n        bondObligor[bondCount] = bd.bidder;\\r\\n        bondProjectId[bondCount] = _projectId;\\r\\n        bondStatus[bondCount] = ProjectStatus.Approved;\\r\\n        bondCompletion[bondCount] = ProjectCompletion.Signed;\\r\\n        bondAmount[bondCount] = bd.amount;\\r\\n\\r\\n        // Calculate and transfer initial 20% payment\\r\\n        uint256 initialPayment = (bd.amount * 20) / 100;\\r\\n        payable(bd.bidder).transfer(initialPayment);\\r\\n\\r\\n        // Mark bid as accepted\\r\\n        bd.accepted = true;\\r\\n\\r\\n        emit BondAwarded(_projectId, bd.bidder, bd.amount, initialPayment);\\r\\n        _createLog(_projectId, \\\"BOND_AWARDED\\\");\\r\\n\\r\\n        pj.posted = false;\\r\\n        return bidWinner;\\r\\n    }\\r\\n\\r\\n    // Auditor approval for milestone\\r\\n    function approveCompletion(uint256 _bondId, ProjectCompletion _milestone) public {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        if (bondStatus[_bondId] != ProjectStatus.Approved) revert ProjectNotApproved();\\r\\n\\r\\n        Project storage project = projects[bondProjectId[_bondId]];\\r\\n        if (msg.sender != project.auditor) revert OnlyAuditorCanApprove();\\r\\n        if (_milestone <= bondCompletion[_bondId]) revert InvalidMilestone();\\r\\n\\r\\n        // Mark this milestone as approved\\r\\n        bondMilestoneApproved[_bondId][_milestone] = true;\\r\\n\\r\\n        emit AuditorApproval(_bondId, _milestone);\\r\\n        _createLog(bondProjectId[_bondId], \\\"MILESTONE_APPROVED\\\");\\r\\n        // return true;\\r\\n    }\\r\\n\\r\\n    // Modified payment release with auditor verification requirement\\r\\n    function releasePayment(uint256 _bondId, ProjectCompletion _newCompletion) public nonReentrant {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        if (bondStatus[_bondId] == ProjectStatus.Completed) revert ProjectAlreadyCompleted();\\r\\n        if (bondStatus[_bondId] == ProjectStatus.Disputed) revert ProjectDisputed();\\r\\n\\r\\n        Project storage project = projects[bondProjectId[_bondId]];\\r\\n\\r\\n        // Verify permissions and completion status\\r\\n        if (msg.sender != project.creator) revert OnlyCreatorCanRelease();\\r\\n        if (_newCompletion <= bondCompletion[_bondId]) revert InvalidCompletionStatus();\\r\\n\\r\\n        // If there's an auditor, they must have approved this milestone\\r\\n        if (project.hasAuditor) {\\r\\n            if (!bondMilestoneApproved[_bondId][_newCompletion]) revert MilestoneNotApproved();\\r\\n        }\\r\\n\\r\\n        // Calculate payment due based on milestone difference\\r\\n        uint256 previousPercentage = getCompletionPercentage(bondCompletion[_bondId]);\\r\\n        uint256 newPercentage = getCompletionPercentage(_newCompletion);\\r\\n        uint256 paymentDue = (bondAmount[_bondId] * (newPercentage - previousPercentage)) / 100;\\r\\n\\r\\n        // Update completion status first\\r\\n        bondCompletion[_bondId] = _newCompletion;\\r\\n\\r\\n        // Update bond status if project is completed\\r\\n        if (_newCompletion == ProjectCompletion.Full) {\\r\\n            bondStatus[_bondId] = ProjectStatus.Completed;\\r\\n            // Update reputation score for successful completion\\r\\n            uint256 bidderId = bidderIds[bondObligor[_bondId]];\\r\\n            bidders[bidderId].reputationScore += 1;\\r\\n        }\\r\\n\\r\\n        // Transfer milestone payment\\r\\n        payable(bondObligor[_bondId]).transfer(paymentDue);\\r\\n\\r\\n        emit PaymentReleased(_bondId, paymentDue, _newCompletion);\\r\\n        _createLog(bondProjectId[_bondId], \\\"PAYMENT_RELEASED\\\");\\r\\n    }\\r\\n\\r\\n    // Enhanced dispute resolution\\r\\n    function createDispute(uint256 _bondId, string memory _evidence) public {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        if (bondStatus[_bondId] != ProjectStatus.Approved) revert ProjectNotApproved();\\r\\n\\r\\n        Project storage project = projects[bondProjectId[_bondId]];\\r\\n        if (msg.sender != project.creator && msg.sender != bondObligor[_bondId]) revert OnlyCreatorOrObligorCanDispute();\\r\\n\\r\\n        disputeCount++;\\r\\n        disputes[disputeCount] = Dispute({\\r\\n            disputeId: disputeCount,\\r\\n            bondId: _bondId,\\r\\n            creator: msg.sender,\\r\\n            mediator: address(0),\\r\\n            evidence: _evidence,\\r\\n            resolved: false,\\r\\n            outcome: DisputeOutcome.Pending\\r\\n        });\\r\\n\\r\\n        bondStatus[_bondId] = ProjectStatus.Disputed;\\r\\n\\r\\n        _createLog(bondProjectId[_bondId], \\\"DISPUTE_CREATED\\\");\\r\\n    }\\r\\n\\r\\n    // Assign mediator to a dispute\\r\\n    function assignMediator(uint256 _disputeId, address _mediator) public onlyOwner {\\r\\n        Dispute storage dispute = disputes[_disputeId];\\r\\n        if (dispute.resolved) revert DisputeAlreadyResolved();\\r\\n        if (dispute.mediator != address(0)) revert MediatorAlreadyAssigned();\\r\\n\\r\\n        dispute.mediator = _mediator;\\r\\n        emit MediatorAssigned(_disputeId, _mediator);\\r\\n        _createLog(bondProjectId[dispute.bondId], \\\"MEDIATOR_ASSIGNED\\\");\\r\\n    }\\r\\n\\r\\n    // Resolve dispute\\r\\n    function resolveDispute(uint256 _disputeId, DisputeOutcome _outcome) public {\\r\\n        Dispute storage dispute = disputes[_disputeId];\\r\\n        if (msg.sender != dispute.mediator) revert OnlyMediatorCanResolve();\\r\\n        if (dispute.resolved) revert DisputeAlreadyResolved();\\r\\n\\r\\n        dispute.resolved = true;\\r\\n        dispute.outcome = _outcome;\\r\\n\\r\\n        // Handle dispute resolution effects\\r\\n        if (_outcome == DisputeOutcome.RuledForCreator) {\\r\\n            // Penalize the obligor\\r\\n            uint256 bidderId = bidderIds[bondObligor[dispute.bondId]];\\r\\n            if (bidders[bidderId].reputationScore > 0) {\\r\\n                bidders[bidderId].reputationScore -= 1;\\r\\n            }\\r\\n        } else if (_outcome == DisputeOutcome.RuledForObligor) {\\r\\n            // Allow obligor to continue work\\r\\n            bondStatus[dispute.bondId] = ProjectStatus.Approved;\\r\\n        }\\r\\n\\r\\n        emit DisputeResolved(_disputeId, _outcome);\\r\\n        _createLog(bondProjectId[dispute.bondId], \\\"DISPUTE_RESOLVED\\\");\\r\\n    }\\r\\n    function getAllProjects() public view returns (Project[] memory) {\\r\\n        Project[] memory allProjects = new Project[](projectId);\\r\\n        for (uint256 i = 0; i < projectId; i++) {\\r\\n            allProjects[i] = projects[i + 1]; // projectId starts from 1\\r\\n        }\\r\\n        return allProjects;\\r\\n    }\\r\\n    function getProjectById(\\r\\n        uint256 _projectId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory title,\\r\\n            uint256 budget,\\r\\n            string memory description,\\r\\n            uint256 deadline,\\r\\n            bool posted,\\r\\n            uint256 Id,\\r\\n            ProjectClassfication projectType,\\r\\n            address creator,\\r\\n            uint256 timePeriod\\r\\n        )\\r\\n    {\\r\\n        if (_projectId > projectId) revert InvalidProjectId();\\r\\n        Project memory project = projects[_projectId];\\r\\n\\r\\n        return (\\r\\n            project.title,\\r\\n            project.budget,\\r\\n            project.description,\\r\\n            project.deadline,\\r\\n            project.posted,\\r\\n            project.projectId,\\r\\n            project.projectType,\\r\\n            project.creator,\\r\\n            project.timePeriod\\r\\n        );\\r\\n    }\\r\\n    function getAllActiveProjects() public view returns (Project[] memory) {\\r\\n        uint256 count = 0;\\r\\n        // Count active projects\\r\\n        for (uint256 i = 1; i <= projectId; i++) {\\r\\n            if (projects[i].posted) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        Project[] memory activeProjects = new Project[](count);\\r\\n        uint256 j = 0;\\r\\n        // Collect active projects\\r\\n        for (uint256 i = 1; i <= projectId; i++) {\\r\\n            if (projects[i].posted) {\\r\\n                activeProjects[j] = projects[i];\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n        return activeProjects;\\r\\n    }\\r\\n    function getBidsByUser(address _bidder) public view returns (Bid[] memory) {\\r\\n        // First, count the number of bids by this user\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 1; i <= bidCount; i++) {\\r\\n            if (bids[i].bidder == _bidder) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create array of correct size\\r\\n        Bid[] memory userBids = new Bid[](count);\\r\\n        uint256 currentIndex = 0;\\r\\n\\r\\n        // Collect all bids by the user\\r\\n        for (uint256 i = 1; i <= bidCount; i++) {\\r\\n            if (bids[i].bidder == _bidder) {\\r\\n                userBids[currentIndex] = bids[i];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return userBids;\\r\\n    }\\r\\n    function getProjectsByCreator(address _creator) public view returns (Project[] memory) {\\r\\n        // First, count the number of projects by this creator\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 1; i <= projectId; i++) {\\r\\n            if (projects[i].creator == _creator) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create array of correct size and populate it\\r\\n        Project[] memory creatorProjects = new Project[](count);\\r\\n        uint256 currentIndex = 0;\\r\\n\\r\\n        // Collect all projects by creator\\r\\n        for (uint256 i = 1; i <= projectId; i++) {\\r\\n            if (projects[i].creator == _creator) {\\r\\n                creatorProjects[currentIndex] = projects[i];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return creatorProjects;\\r\\n    }\\r\\n    // Get Project Bid Winner\\r\\n    function getProjectBidWinner(uint256 _projectId) public view returns (uint256 _bidWinnerId) {\\r\\n        // Project storage pj = projects[_projectId];\\r\\n        if (!evaluatedbids[_projectId]) revert BidNotEvaluated();\\r\\n        // require(msg.sender == pj.creator, \\\"You are Not Authothorized\\\");\\r\\n        if (_projectId > projectId) revert InvalidProjectId();\\r\\n        return bondWinners[_projectId];\\r\\n    }\\r\\n    // Get transparency logs for a project\\r\\n    function getProjectLogs(uint256 _projectId) public view returns (LogEntry[] memory) {\\r\\n        return transparencyLogs[_projectId];\\r\\n    }\\r\\n\\r\\n    function getCompletionPercentage(ProjectCompletion _completion) public pure returns (uint256) {\\r\\n        // Return percentages based on completion stage\\r\\n        if (_completion == ProjectCompletion.Signed) return 20; // Initial 20%\\r\\n        if (_completion == ProjectCompletion.Quarter) return 40; // +20%\\r\\n        if (_completion == ProjectCompletion.Half) return 60; // +20%\\r\\n        if (_completion == ProjectCompletion.ThreeQuarters) return 80; // +20%\\r\\n        if (_completion == ProjectCompletion.Full) return 100; // Final 20%\\r\\n        return 0;\\r\\n    }\\r\\n    // Function to get the current completion level of a bond\\r\\n    function getCompletionLevel(uint256 _bondId) public view returns (ProjectCompletion) {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        return bondCompletion[_bondId];\\r\\n    }\\r\\n    \\r\\n    // Public getter functions for bond data\\r\\n    function getBondStatus(uint256 _bondId) public view returns (ProjectStatus) {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        return bondStatus[_bondId];\\r\\n    }\\r\\n    \\r\\n    function getBondObligor(uint256 _bondId) public view returns (address) {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        return bondObligor[_bondId];\\r\\n    }\\r\\n    \\r\\n    function getBondAmount(uint256 _bondId) public view returns (uint256) {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        return bondAmount[_bondId];\\r\\n    }\\r\\n    \\r\\n    function getBondProjectId(uint256 _bondId) public view returns (uint256) {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        return bondProjectId[_bondId];\\r\\n    }\\r\\n    \\r\\n    function isMilestoneApproved(uint256 _bondId, ProjectCompletion _milestone) public view returns (bool) {\\r\\n        if (bondObligor[_bondId] == address(0)) revert BondDoesNotExist();\\r\\n        return bondMilestoneApproved[_bondId][_milestone];\\r\\n    }\\r\\n\\r\\n    // Removed simple dispute function which is now replaced by more comprehensive dispute resolution system\\r\\n\\r\\n    // Using OpenZeppelin's ReentrancyGuard instead of custom nonReentrant modifier\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xd99b4eb5c2eea8926699da394a2ce19df728b9bb6b2b08a63a4161d9986c7298\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461009157331561007b5760008054336001600160a01b031982168117835560405192916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a3600180556004600255806003558060045580600555600655614c349081620000978239f35b631e4fbdf760e01b815260006004820152602490fd5b600080fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c9081630c5dfcd714613b2a57508063105ad5ac14613acc578063107046bd146139e457806310a6b7661461399b578063147df50d1461396a5780631a46ceee1461382657806321b4b5aa1461372757806324f7023e146136d657806333209e65146132f65780633fafa127146132d857806341ad56921461329e5780634423c5f1146132165780634862ce47146131e557806349fcd2f6146131b557806354fd4d50146131975780635583370114612f4d578063564a565d14612eb257806360fe2a7514612e8a5780636b57f26214612e4b57806370d29c1114612e2d578063715018a614612de6578063774b921314612db557806380d0382914612ca357806382c1034614612a6b57806382d9eb3114612a4f5780638baa3f4d14612a035780638d2d0d5c146129b65780638da5cb5b1461298d5780638edd4d241461296f578063936cf6dd1461292d5780639c32c447146126605780639cd43bd6146118875780639e491c5714611fe55780639e6dc9c114611f27578063a28889e114611f09578063a6b0293914611a43578063a84cfba6146118c1578063a9a35a9b14611887578063b032518414611834578063b40a562714611816578063b75953cd146117ea578063b9382531146114fa578063bee5cdca1461138d578063c0574ff214611186578063c15dc66314611063578063c374df5414610faf578063c637144114610f66578063cc21bb2114610f0e578063cdab953214610d28578063cdd4c85714610c3a578063cff29dfd14610bd6578063d198fe5514610a5a578063d816dbbe146109e8578063df9a4f561461096c578063e55e4211146107d4578063e6116cfd14610693578063e91b0a411461062c578063ef3a685c146104c0578063f2ef441b146103375763f2fde38b146102be573861000f565b34610332576020366003190112610332576102d76141ba565b6102df61438f565b6001600160a01b03908116908115610319576000548260018060a01b031982161760005516600080516020614bbf833981519152600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b34610332576000366003190112610332576003805460016000815b83811115610483575061036490614a8f565b92600090825b848111156103845760405180610380888261423c565b0390f35b806000526020600b8152604060002090600782015460ff91828216806103b8575b50505050506103b3906143cc565b61036a565b916103b39597939161047895936006604051956103d487613fd8565b80546001600160a01b0390811688528d820154948801949094526103fa6002820161404d565b604088015261040a8b820161404d565b606088015260048101546080880152600581015460a0880152015460c0860152151560e0850152828260081c166104408161413b565b6101008501528160101c1661012084015260b01c161515610140820152610467828a614677565b526104728189614677565b506143cc565b9290878080806103a5565b80600052600b60205260ff600760406000200154166104ab575b6104a6906143cc565b610352565b906104b86104a6916143cc565b91905061049d565b3461033257602080600319360112610332576004359081600052600b815260406000209160018060a01b0380845416330361061a578254938415610608576007019360ff855460b01c166105f65760405194848601904282524460408801523360601b60608801528460748801526074875260a087019387851060018060401b038611176105e0576105886105837fa726f44c951dc5b9682833688ff307aa831c8736f8edf5a12bcb962a5a6c3d0995899561001b9b8a99604052519020614615565b6141e6565b90549060031b1c169061059b82826143e8565b805460ff60b01b1916600160b01b179055604051908152a26f105551125513d497d054d4d251d3915160821b604051926105d48461400f565b6010845283015261440f565b634e487b7160e01b600052604160045260246000fd5b60405163eebbc53960e01b8152600490fd5b60405163f3ded74d60e01b8152600490fd5b6040516314f9fa3360e31b8152600490fd5b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b031615610681576000526014602052602060ff604060002054166040519061067d8161413b565b8152f35b60405163a1e549e960e01b8152600490fd5b3461033257602080600319360112610332576106ad6141ba565b906106b661438f565b6001600160a01b03918216600081815260188352604090205490919060ff16156107c25760008281526018825260408120805460ff191690555b81548082101561001b57849084610706846141e6565b939054600394851b1c1614610725575050610720906143cc565b6106f0565b9094929350600019918282019182116107ac5761075584610748610774946141e6565b905490891b1c16916141e6565b90919082549060031b9160018060a01b03809116831b921b1916179055565b82548015610796570192610787846141e6565b8154921b9290921b1916905555005b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6040516357fb4f9560e01b8152600490fd5b346103325760403660031901126103325760043560243590600482101561033257806000526020906010825260406000209260018060a01b0380600386015416330361095a576005850180549060ff8216610948578361083e91600160ff19809516178155614a70565b60018303610902575060018501546000526011845260406000205416600052600f8352604060002054600052600d835260036040600020018054806108d7575b505092600191600080516020614b7f8339815191528461001b965b6108a6604051809261422f565ba20154600052601281526040600020546f111254d415551157d49154d3d315915160821b604051926105d48461400f565b909491929060001981019081116107ac57909455929081600080516020614b7f83398151915261087e565b60019391508483600080516020614b7f83398151915292600261001b99961461092c575b50610899565b8686015460005260148352604060002090815416905588610926565b60405163f10068b560e01b8152600490fd5b604051631994c7ed60e01b8152600490fd5b34610332576020366003190112610332576109856141ba565b61098d61438f565b6001600160a01b03811660008181526018602052604090205460ff166105f65760005260186020526040600020600160ff1982541617905560205490600160401b8210156105e05761075582600161001b94016020556141e6565b34610332576109f6366141d0565b90600052601f602052604060002090815481101561033257610a1791614373565b5080546001600160a01b03166002610a316001840161404d565b920154610a506040519384938452606060208501526060840190614116565b9060408301520390f35b3461033257610a6836614145565b90806000526020906011825260018060a01b0380604060002054161561068157816000526014835260ff60406000205416610aa28161413b565b610bc4578160005260128352604060002054600052600b835260076040600020015460101c163303610bb257806000526015825260ff604060002054166005811015610b9c576005841015610b9c57831115610b8a57807f366cfc0ceb7ff5abe6877a6b905e43a50db357b10cfee9c848f9afa5e0d2eb928361001b958360005260168252610b35816040600020614a58565b600160ff19825416179055610b4d6040518092614366565ba260005260128152604060002054711352531154d513d39157d054141493d5915160721b60405192610b7e8461400f565b6012845283015261440f565b6040516302e845cd60e61b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b60405163a3ac7c2560e01b8152600490fd5b60405163fcf6007160e01b8152600490fd5b3461033257602036600319011261033257600435600052600d60205260a06040600020805490600180841b0360018201541690600281015460ff60046003840154930154169260405194855260208501526040840152606083015215156080820152f35b34610332576040366003190112610332576024356001600160a01b03818116916004359083900361033257610c6d61438f565b80600052601060205260406000209160ff6005840154166109485760038301908154908116610d16576001600160a01b031916841790556040519283526001927ffe47a7b6d774b16667067d1b3ec619c5932345a4a17a0795732fdf9426e366cc90602090a20154600052601260205261001b60406000205460405190610cf38261400f565b601182527013515112505513d497d054d4d251d39151607a1b602083015261440f565b60405163b21ee3bd60e01b8152600490fd5b3461033257610d3636614334565b9060405190602091828101908282523360601b6040820152610d756054828751610d65818484018a8c016140f3565b810103603481018452018261402a565b5190206000818152601d84526040808220805460ff19166001908117909155601c8652912085519295909291906001600160401b0383116105e057610dba8454613f67565b601f8111610ec5575b508590601f8411600114610e4957938380600080516020614bdf83398151915295899561001b9b958a99600094610e3e575b50501b916000199060031b1c19161790555b604051908152a27210d3d4949554151253d397d4915413d4951151606a1b60405192610e328461400f565b6013845283015261440f565b015192508c80610df5565b90601f9392931983169185600052876000209260005b818110610eb057509361001b9993889793600080516020614bdf8339815191529793838c9810610e97575b505050811b019055610e07565b015160001960f88460031b161c191690558a8080610e8a565b82840151855593860193928901928901610e5f565b8460005286600020601f850160051c810191888610610f04575b601f0160051c019083905b828110610ef8575050610dc3565b60008155018390610eea565b9091508190610edf565b3461033257604036600319011261033257610f276141ba565b6001600160a01b031660009081526008602052604090208054602435919082101561033257602091610f5891614217565b90546040519160031b1c8152f35b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b0316156106815760005260126020526020604060002054604051908152f35b3461033257602080600319360112610332576001600160a01b03610fd16141ba565b1660005260088152604060002060405190818382549182815201908192600052846000209060005b8682821061104f57868661100f8288038361402a565b604051928392818401908285525180915260408401929160005b82811061103857505050500390f35b835185528695509381019392810192600101611029565b835485529093019260019283019201610ff9565b346103325760208060031936011261033257600435600052601f81526040600020908154916110918361468b565b9261109f604051948561402a565b8084528284018092600052836000206000915b83831061113c5750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106110ed5785850386f35b909192938280600192603f19898203018552875190848060a01b0382511681526040806111268585015160608088870152850190614116565b93015191015296019201960195929190926110e0565b60038660019260409998995161115181613ff4565b848060a01b03865416815261116785870161404d565b83820152600286015460408201528152019201920191909594956110b2565b61118f366141d0565b611197614a35565b60056111a381546143cc565b9283825582600052602093600c855260406000209180600052600b8652604060002091600783019460ff8654161561137b5792546001600160a01b0393908416330361061a57600385019485543403611369576002810192858454169081600052600f8b52604060002054600052600d8b5260ff600460406000200154166113575760005260118a5260406000209060018060a01b03198254161790558154600052601289528360406000205581546000526014895260406000209560ff1996878154169055825460005260158a5260406000208781541690558054835460005260138b52806040600020556014810290808204601414901517156107ac57606490046000808080848b8a541682821561134e575bf115611342576113319686957fcc761dea67d3ed7501831391a5b0f6be67778c11bc18cb0bc7eb8d2019253bb1956060950160018b825416179055541691546040519283528b8301526040820152a2604051906113148261400f565b600c82526b1093d39117d055d05491115160a21b8783015261440f565b815416905560018055604051908152f35b6040513d6000823e3d90fd5b506108fc6112b8565b60405163a2c9d92760e01b8152600490fd5b60405163326a9b2960e01b8152600490fd5b604051630bf2fc7b60e01b8152600490fd5b346103325760203660031901126103325760043560035481116114e857600052600b60205260ff6040600020604051906113c682613fd8565b80546001600160a01b03908116835260018201546020840190815291906113ef6002830161404d565b93604081019485526114036003840161404d565b91606082019283526004840154916080810192835260058501549560a082019687526114be600760068801549760c0850198895201549860e08401988b8b1615158a526114ab8c8c60081c16966114598861413b565b61010099888b8901526101209e8f9e8f848260101c16908b015260b01c161515610140890152519a51935192519b5115159551966114968961413b565b51169751996040519d8e9d8e528d0190614116565b9160208c01528a820360408c0152614116565b966060890152608088015260a08701526114d78161413b565b60c086015260e08501528301520390f35b604051632af342d760e21b8152600490fd5b346103325761150836614145565b611510614a35565b8160005260119160209183835260018060a01b0380604060002054161561068157826000526014845260ff906001826040600020541661154f8161413b565b146117d85783600052601485526002826040600020541661156f8161413b565b146117c6578360005260128552604060002054600052600b855260406000208181541633036117b457846000526015865282604060002054166005811015610b9c576005851015610b9c578411156117a2576007015460b01c8216611773575b83600052601585526115e78260406000205416614b2e565b6115f084614b2e565b90856000526013875260406000205490820391821161175e5781810291818304149015171561174957606490049586928560005260158752604060002060ff199182825416908716179055600485146116de575b50600080938193829388845289526040832054168282156116d5575bf115611342577f9038e8201f7dbe27b4bcc817a2873036b611a77262be4638500536e6815b579760406116cf956116a08594835192835287830190614366565ba2600052601281526040600020546f1410565351539517d49153115054d15160821b604051926105d48461400f565b60018055005b506108fc611660565b909192506014865260016040600020918254161790558085528160406000205416600052600f8552604060002054600052600d855260036040600020018054906001820180921161173457558591906000611644565b82634e487b7160e01b60005260045260246000fd5b86634e487b7160e01b60005260045260246000fd5b87634e487b7160e01b60005260045260246000fd5b83600052601685528161178a846040600020614a58565b54166115cf5760405163b755348d60e01b8152600490fd5b60405163fb981fdd60e01b8152600490fd5b604051637ccfb14360e11b8152600490fd5b6040516377f1b37360e01b8152600490fd5b604051633375d5c760e11b8152600490fd5b3461033257602036600319011261033257600435600052601b6020526020604060002054604051908152f35b34610332576000366003190112610332576020600454604051908152f35b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b031615610681576000526015602052602060ff604060002054166118856040518092614366565bf35b34610332576020366003190112610332576001600160a01b036118a86141ba565b1660005260096020526020604060002054604051908152f35b3461033257602080600319360112610332576118db6141ba565b600380546001600160a01b0392831693909290916001906000825b86811115611a09575061190890614a8f565b95600093835b8781111561192457604051806103808b8261423c565b80600052600b87526040600020828154169084821461194e575b5050611949906143cc565b61190e565b96611a0191600761194994996040519261196784613fd8565b8352898101548c84015261197d6002820161404d565b604084015261198d89820161404d565b606084015260048101546080840152600581015460a0840152600681015460c0840152015460ff90818116151560e0840152818160081c166119ce8161413b565b610100840152868160101c1661012084015260b01c1615156101408201526119f6828d614677565b52610472818c614677565b95908a61193e565b80600052600b865287856040600020541614611a2e575b611a29906143cc565b6118f6565b90611a3b611a29916143cc565b919050611a20565b346103325760a0366003190112610332576004356001600160401b03811161033257611a73903690600401614164565b6024356001600160401b03811161033257611a92903690600401614164565b906003608435101561033257815115611ef757805115611ee55760443515611ed35760643515611ec157611ac76003546143cc565b9081600355611ad8604435426143db565b9060405193611ae685613fd8565b33855283602086015260408501526060840152604435608084015260a083015260643560c0830152600160e0830152611b2060843561413b565b60843561010083015260006101208301526000610140830152600052600b60205260406000209060018060a01b0381511660018060a01b031983541617825560208101516001830155604081015191825160018060401b0381116105e057611b8b6002830154613f67565b601f8111611e7a575b506020601f8211600114611e0c5781929394600092611e01575b50508160011b916000199060031b1c19161760028201555b60608201518051906001600160401b0382116105e057611be96003840154613f67565b601f8111611dba575b50602090601f8311600114611d445791806101409492600794600092611d39575b50508160011b916000199060031b1c19161760038201555b6080840151600482015560a0840151600582015560c084015160068201550191611c5b60e08201511515846143bb565b610100810151611c6a8161413b565b611c738161413b565b835461ff00191660089190911b61ff0016178355610120810151611ca0906001600160a01b0316846143e8565b0151815460ff60b01b191690151560b01b60ff60b01b16179055600354604051338152606435602082015261001b919081907f0db710c469c97f053e348f5d284c47de30e140867a591571cde5c008435395a190606090611d0260843561413b565b6084356040820152a260405190611d188261400f565b600f82526e141493d29150d517d0d49150551151608a1b602083015261440f565b015190508680611c13565b906003840160005260206000209160005b601f1985168110611da2575092610140949260019260079583601f19811610611d89575b505050811b016003820155611c2b565b015160001960f88460031b161c19169055868080611d79565b91926020600181928685015181550194019201611d55565b600384016000526020600020601f840160051c810160208510611dfa575b601f830160051c82018110611dee575050611bf2565b60008155600101611dd8565b5080611dd8565b015190508480611bae565b6002830160005260206000209060005b601f1984168110611e625750600193949583601f19811610611e49575b505050811b016002820155611bc6565b015160001960f88460031b161c19169055848080611e39565b9091602060018192858a015181550193019101611e1c565b600283016000526020600020601f830160051c810160208410611eba575b601f830160051c82018110611eae575050611b94565b60008155600101611e98565b5080611e98565b604051630757bfc960e21b8152600490fd5b6040516329fc802760e11b8152600490fd5b6040516352ddcdef60e11b8152600490fd5b60405163d937d5df60e01b8152600490fd5b34610332576000366003190112610332576020600654604051908152f35b346103325760203660031901126103325760043560005260076020526040600020805461038060018060a01b03600184015416926002810154611f6c6003830161404d565b91611fcb611f7c6004830161404d565b611fbd600584015495611f99600760ff600688015416960161404d565b956040519a8b9a8b5260208b015260408a01526101008060608b0152890190614116565b908782036080890152614116565b9260a0860152151560c085015283820360e0850152614116565b346103325760a0366003190112610332576044356001600160401b03811161033257612015903690600401614164565b6064356001600160401b03811161033257612034903690600401614164565b906084356001600160401b03811161033257612054903690600401614164565b600435158015612653575b6126415760646024351161262f57600435600052600c6020526004356040600020540361261d57600435600052600c60205260018060a01b036002604060002001541690604051906120b082613fa1565b600435825282602083015260243560408301528360608301528460808301524260a083015260466024351060c083015260e08201526004356000526007602052604060002090805182556001820160018060a01b0360208301511660018060a01b031982541617905560408101516002830155606081015180519060018060401b0382116105e05781906121476003860154613f67565b601f81116125ca575b50602090601f83116001146125585760009261254d575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b0382116105e0576121a26004850154613f67565b601f8111612506575b50602090601f83116001146124935760e093929160009183612488575b50508160011b916000199060031b1c19161760048401555b60a081015160058401556121fd60c08201511515600685016143bb565b01518051906001600160401b0382116105e05761221d6007840154613f67565b601f8111612441575b50602090601f83116001146123d15760079291600091836123c6575b50508160011b916000199060031b1c1916179101555b8060005260086020526122716024356040600020614635565b8060005260086020526040600020926040518085602082975493848152019060005260206000209260005b8181106123ad5750506122b19250038561402a565b600091825b85518410156122e3576122d76122dd916122d08689614677565b51906143db565b936143cc565b926122b6565b85518591811561239757836000526009602052046040600020557fb6d80c1873652a94be51d53ef11064e3eb6a764aa55b20de2879ebafb93856426040516024358152604060208201528061233f600435946040830190614116565b0390a36046602435101561234f57005b7f31f7ed45332d961cfcecc0de0d966ebaff75c4f5aa9da02e92415f453f04ba9f61238560405192604084526040840190614116565b916000602082015280600435930390a2005b634e487b7160e01b600052601260045260246000fd5b845483526001948501948994506020909301920161229c565b015190508780612242565b906007840160005260206000209160005b601f19851681106124295750918391600193600795601f19811610612410575b505050811b01910155612258565b015160001960f88460031b161c19169055878080612402565b919260206001819286850151815501940192016123e2565b600784016000526020600020601f840160051c810160208510612481575b601f830160051c82018110612475575050612226565b6000815560010161245f565b508061245f565b0151905088806121c8565b906004850160005260206000209160005b601f19851681106124ee575091839160019360e09695601f198116106124d5575b505050811b0160048401556121e0565b015160001960f88460031b161c191690558880806124c5565b919260206001819286850151815501940192016124a4565b600485016000526020600020601f840160051c810160208510612546575b601f830160051c8201811061253a5750506121ab565b60008155600101612524565b5080612524565b015190508780612167565b9250600385016000526020600020906000935b601f19841685106125af576001945083601f19811610612596575b505050811b01600383015561217f565b015160001960f88460031b161c19169055878080612586565b8181015183556020948501946001909301929091019061256b565b909150600385016000526020600020601f840160051c810160208510612616575b90849392915b601f830160051c82018110612607575050612150565b600081558594506001016125f1565b50806125eb565b60405163ac96c2bd60e01b8152600490fd5b6040516330cdce3160e21b8152600490fd5b60405163057a142160e41b8152600490fd5b506004546004351161205f565b346103325761266e36614334565b90806000526020906011825260018060a01b039283604060002054161561068157816000526014835260ff604060002054166126a98161413b565b610bc4578160005260128352604060002054600052600b8352836040600020541633141580612914575b612902576126e26006546143cc565b600681905560405190916001600160401b0360e08301818111848210176105e05760405283835285830196858852604084013381526060850190600082526080860194855260a086019960008b5260c08701976000895260005260108a5260406000209651875551926001938488015580600288019251169160018060a01b03199283825416179055600387019251169082541617905560048401925180519283116105e0576127928454613f67565b601f81116128b9575b508790601f841160011461284b5792806005959381936127db9896600094612840575b50501b916000199060031b1c19161790555b0194511515856143bb565b51926004841015610b9c5761001b936127f391614a70565b600052601481526040600020600260ff19825416179055601281526040600020546e111254d415551157d0d49150551151608a1b604051926128348461400f565b600f845283015261440f565b015192508c806127be565b90601f9392931983169185600052896000209260005b8b8282106128a5575050916127db979593918560059896941061288c575b505050811b0190556127d0565b015160001960f88460031b161c191690558a808061287f565b838501518655948701949384019301612861565b8460005288600020601f850160051c8101918a86106128f8575b601f0160051c019083905b8281106128ec57505061279b565b600081550183906128de565b90915081906128d3565b60405163cf7ea67d60e01b8152600490fd5b50816000526011835283604060002054163314156126d3565b3461033257602036600319011261033257600435602054811015610332576129566020916141e6565b905460405160039290921b1c6001600160a01b03168152f35b34610332576000366003190112610332576020600554604051908152f35b34610332576000366003190112610332576000546040516001600160a01b039091168152602090f35b34610332576040366003190112610332576001600160a01b036129d76141ba565b1660005260176020526040600020602435600052602052602060ff604060002054166040519015158152f35b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b0390811615610681576020916000526011825260406000205416604051908152f35b346103325760203660031901126103325761001b6004356146fa565b346103325760208060031936011261033257612a856141ba565b6004546001600160a01b03929160009190841660015b82811115612c665750612aad8361468b565b92612abb604051948561402a565b808452612aca601f199161468b565b018460005b828110612c275750505060009060015b83811115612b8b575050505060405191808301818452825180915260408401918060408360051b8701019401926000965b838810612b1d5786860387f35b90919293948380600192603f198a820301865288519081518152828201518382015285604083015116604082015260608083015190820152612b6e6080808401519060c08091850152830190614116565b9160a0809101511515910152970193019701969093929193612b10565b80600052600c865260406000208760028201541690838214612bb8575b5050612bb3906143cc565b612adf565b93612c1f9160ff6005612bb3959760405193612bd385613fbd565b8154855260018201548d860152604085015260038101546060850152612bfb6004820161404d565b6080850152015416151560a0820152612c148289614677565b526104728188614677565b929088612ba8565b604051612c3381613fbd565b600081526000838201526000604082015260606000818301526080820152600060a0820152828288010152018590612acf565b80600052600c855281866002604060002001541614612c8e575b612c89906143cc565b612a9b565b92612c9b612c89916143cc565b939050612c80565b346103325760003660031901126103325760038054612cc181614a8f565b9060005b818110612cda5760405180610380858261423c565b600190818101918282116107ac57612db092600052602090600b82526007604060002060405193612d0a85613fd8565b81546001600160a01b0390811686529382015490850152612d2d6002820161404d565b6040850152612d3d89820161404d565b606085015260048101546080850152600581015460a0850152600681015460c0850152015460ff91828216151560e0850152828260081c16612d7e8161413b565b6101008501528160101c1661012084015260b01c161515610140820152612da58286614677565b526104728185614677565b612cc5565b3461033257612dc3366141d0565b906000526019602052604060002080548210156103325760209161295691614217565b3461033257600036600319011261033257612dff61438f565b600080546001600160a01b0319811682556001600160a01b0316600080516020614bbf8339815191528280a3005b34610332576000366003190112610332576020600a54604051908152f35b34610332576020366003190112610332576001600160a01b03612e6c6141ba565b166000526018602052602060ff604060002054166040519015158152f35b34610332576020366003190112610332576020612ea860043561461f565b6040519015158152f35b3461033257602036600319011261033257600435600052601060205260406000208054600182015491610380612f3160018060a01b039283600282015416936003820154166005612f056004840161404d565b92015494604051978897885260208801526040870152606086015260e0608086015260e0850190614116565b9160ff8116151560a085015260ff60c085019160081c1661422f565b346103325760208060031936011261033257612f6761438f565b600435600052600d81526004604060002001906001918260ff1982541617905560405190612f948261400f565b601282527110925111115497d0931050d2d31254d5115160721b8183015260008052601f8152604060002060405190612fcc82613ff4565b33825282820184815260408301914283528054600160401b8110156105e057612ff9918882018155614373565b939093613181575183546001600160a01b0319166001600160a01b039190911617835551805195808401916001600160401b0388116105e05761303c8354613f67565b601f8111613138575b508590601f89116001146130ba5792888060009a6002956130a49a9895600080516020614b9f8339815191529c9a988e946130af575b50501b918b199060031b1c19161790555b51910155604051928392604084526040840190614116565b9033908301520390a2005b015192508d8061307b565b9790601f1982169884600052876000209960005b81811061312357509260009a600080516020614b9f8339815191529a98969360029693836130a49c9a971061310b575b505050811b01905561308c565b01518c1960f88460031b161c191690558b80806130fe565b838301518c559a85019a9289019289016130ce565b8360005286600020601f8a0160051c810191888b10613177575b601f0160051c019083905b82811061316b575050613045565b6000815501839061315d565b9091508190613152565b634e487b7160e01b600052600060045260246000fd5b34610332576000366003190112610332576020600254604051908152f35b34610332576020366003190112610332576004356005811015610332576131dd602091614b2e565b604051908152f35b34610332576131f3366141d0565b90600052600e6020526040600020805482101561033257602091610f5891614217565b3461033257602036600319011261033257600435600052600c6020526040600020805460018201549161329260018060a01b0360028301541691600381015460ff60056132656004850161404d565b9301541693604051968796875260208701526040860152606085015260c0608085015260c0840190614116565b90151560a08301520390f35b34610332576020366003190112610332576001600160a01b036132bf6141ba565b16600052600f6020526020604060002054604051908152f35b34610332576000366003190112610332576020600354604051908152f35b34610332576060366003190112610332576001600160401b0360243581811161033257613327903690600401614164565b60043580600052602091600b8352604060002033600052600f8452604060002054600052600d84526040600020913360005260178552604060002084600052855260ff604060002054166136c45760ff6004840154166136b25781546001600160a01b039690871633146136a05733600052600f86526040600020541561368e57600783019160ff8354161561137b5785600052600b875287604060002054161561367c576133d58661461f565b61366a5760ff6133e66004546143cc565b93846004555460081c16936133fa8561413b565b6001809514613646575b506040519761341289613fbd565b8389528789019087825260408a019033825260608b0192604435845260808c0194855260a08c019660008852600052600c8b5260406000209b518c5551878c015560028b0191511660018060a01b0319825416179055516003890155519081519081116105e05760048801916134888354613f67565b601f81116135fd575b508790601f831160011461358b57936134d8938361001b9b9460059460029a9998600092613580575b5050600019600383901b1c191690871b1790555b51151591016143bb565b3360005260178552604060002084600052855260406000209060ff19825416179055600e845261350f604060002060045490614635565b0161351a81546143cc565b90556004547fb5cc2e6a75ba593196ae1600d90399014d2790179ceae0b5d9a2303144028bad606060405184815233868201526044356040820152a26c10925117d4d550935255151151609a1b604051926135748461400f565b600d845283015261440f565b015190508d806134ba565b908360005288600020916000601f198516905b8181106135e8575096846005948298946134d8989461001b9f9860029d9c106135cf575b505050811b0190556134ce565b015160001960f88460031b161c191690558d80806135c2565b82840151855593880193928b01928b0161359e565b8360005288600020601f840160051c8101918a851061363c575b601f0160051c019086905b828110613630575050613491565b60008155018690613622565b9091508190613617565b60060154604435036136585788613404565b60405163162908e360e11b8152600490fd5b60405163bcdae46160e01b8152600490fd5b6040516338fde52b60e01b8152600490fd5b60405163172f3d1160e11b8152600490fd5b604051633246839360e11b8152600490fd5b604051636c14291560e11b8152600490fd5b60405163101713ef60e11b8152600490fd5b34610332576136e436614145565b6000828152601160205260409020546001600160a01b0316156106815761371b60ff91602093600052601684526040600020614a58565b54166040519015158152f35b34610332576020366003190112610332576004356000526007602052604060002060405161375481613fa1565b8154815260018201546001600160a01b03166020820152600282015460408201908152916103809060e061378a6003830161404d565b936060810194855261380e6137a16004850161404d565b966080830197885260058501549260a081019384526137d3600760ff6006890154169760c0840198151589520161404d565b9485910152519551965191519351151591613800604051988998895260c060208a015260c0890190614116565b908782036040890152614116565b926060860152608085015283820360a0850152614116565b3461033257600036600319011261033257336000526020600f81526040600020546139585733600052600f8152604060002054600052600d815260ff600460406000200154166139465761387b600a546143cc565b80600a5533600052600f82528060406000205560405160a0810181811060018060401b038211176105e057613916926004916040528083528483013381526040840160008152606085019160008352608086019360008552600052600d8852604060002095518655600186019060018060a01b0390511660018060a01b031982541617905551600285015551600384015551151591016143bb565b7ffe92b55fae486bedee58bf3b8551b5cd34508dd518b841a10424e3a6491a0ccc600a54916040519283523392a2005b604051631f7b776b60e01b8152600490fd5b604051632391379760e21b8152600490fd5b3461033257602036600319011261033257600435600052601a602052602060ff604060002054166040519015158152f35b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b0316156106815760005260136020526020604060002054604051908152f35b34610332576020366003190112610332576004356000908152600b6020526040902080546001820154916001600160a01b039182169160ff90613a296002840161404d565b90613a366003850161404d565b916004850154946005810154613a886007600684015493015495613a7a888860081c16956040519c8d9c8d5260208d015260408c61016091829101528c0190614116565b908a820360608c0152614116565b96608089015260a088015260c0870152838316151560e0870152613aab8161413b565b6101008601528160101c1661012085015260b01c1615156101408301520390f35b346103325760203660031901126103325760043580600052601a60205260ff6040600020541615613b185760035481116114e857600052601b6020526020604060002054604051908152f35b6040516308149b2360e31b8152600490fd5b34610332576020806003193601126103325760043580600052600b825260079081604060002001549260ff9485851615613f5857506000828152600b825260409020546001600160a01b03959086161561367c5782600052601a82528060406000205416613f465782600052600e8252604060002093604051808685829854938481520190600052856000209260005b87828210613f3057505050613bd19250038661402a565b845115613f1e57613be285516146a2565b9460009460005b8251811015613cb257613bfc8184614677565b518060005284875260466040600020604051613c1781613fa1565b815481528d6001830154168a82015260e0613c798960028501549460408501958652613c456003820161404d565b6060860152613c566004820161404d565b6080860152600581015460a08601528c600682015416151560c08601520161404d565b9101525110613c92575b50613c8d906143cc565b613be9565b87613cab91613ca5613c8d949a8c614677565b526143cc565b9690613c83565b878683898c898215613f0c5760009160081c16613cce8161413b565b60028103613dfd57505060001990613ce5816146a2565b916000956000915b838310613d8c5750505050613d3690613d3061001b9560405186810190613d2881613d1a334442876146d4565b03601f19810183528261402a565b519020614615565b90614677565b515b81600052601a83526040600020600160ff19825416179055601b83526040600020557410925117d1559053155055115117d5d2551217d353605a1b60405192613d808461400f565b6015845283015261440f565b613d968383614677565b519788600052600c885260036040600020015491808310600014613dcd575050613dc79092600198613ca58761466a565b91613ced565b80949299919914613de3575b50613dc7906143cc565b88613df691613ca5613dc7949b89614677565b9790613dd9565b613e068161413b565b80613ec5575050600090613e19816146a2565b916000956000915b838310613e545750505050613e4e90613d3061001b9560405186810190613d2881613d1a334442876146d4565b51613d38565b613e5e8383614677565b519788600052600c885260036040600020015491808311600014613e95575050613e8f9092600198613ca58761466a565b91613e21565b80949299919914613eab575b50613e8f906143cc565b88613ebe91613ca5613e8f949b89614677565b9790613ea1565b91600183613ed761001b98949561413b565b14613ee4575b5050613d38565b613f049250613d309060405186810190613d2881613d1a334442876146d4565b518480613edd565b604051636ca111ef60e01b8152600490fd5b604051630ecc544160e01b8152600490fd5b855484526001958601958b955093019201613bba565b6040516322989cbd60e01b8152600490fd5b630bf2fc7b60e01b8152600490fd5b90600182811c92168015613f97575b6020831014613f8157565b634e487b7160e01b600052602260045260246000fd5b91607f1691613f76565b61010081019081106001600160401b038211176105e057604052565b60c081019081106001600160401b038211176105e057604052565b61016081019081106001600160401b038211176105e057604052565b606081019081106001600160401b038211176105e057604052565b604081019081106001600160401b038211176105e057604052565b601f909101601f19168101906001600160401b038211908210176105e057604052565b906040519182600082549261406184613f67565b9081845260019485811690816000146140d0575060011461408d575b505061408b9250038361402a565b565b9093915060005260209081600020936000915b8183106140b857505061408b9350820101388061407d565b855488840185015294850194879450918301916140a0565b91505061408b94506020925060ff191682840152151560051b820101388061407d565b60005b8381106141065750506000910152565b81810151838201526020016140f6565b9060209161412f815180928185528580860191016140f3565b601f01601f1916010190565b60031115610b9c57565b6040906003190112610332576004359060243560058110156103325790565b81601f82011215610332578035906001600160401b0382116105e05760405192614198601f8401601f19166020018561402a565b8284526020838301011161033257816000926020809301838601378301015290565b600435906001600160a01b038216820361033257565b6040906003190112610332576004359060243590565b60205481101561420157602060005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b80548210156142015760005260206000200190600090565b906004821015610b9c5752565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410614271575050505050505090565b909192939495968580600192603f198582030187528a5190848060a01b039182815116825283810151848301526142cb6142b889830151610160808c870152850190614116565b6060808401519085830390860152614116565b926080808301519084015260a0808301519084015260c0808301519084015260e08083015115159084015261010080830151906143078261413b565b84015261012090818301511690830152610140809101511515910152990194019401929594939190614260565b9060406003198301126103325760043591602435906001600160401b0382116103325761436391600401614164565b90565b906005821015610b9c5752565b8054821015614201576000526003602060002091020190600090565b6000546001600160a01b031633036143a357565b60405163118cdaa760e01b8152336004820152602490fd5b9060ff801983541691151516179055565b60001981146107ac5760010190565b919082018092116107ac57565b805462010000600160b01b03191660109290921b62010000600160b01b0316919091179055565b9190916000928184526020601f81526040908186209582519061443182613ff4565b338252828201858152848301914283528954600160401b811015614601576144609060019b8c82018155614373565b9490946145ed575184546001600160a01b0319166001600160a01b0391909116178455905180519099808501926001600160401b0383116145d9576144a58454613f67565b601f8111614593575b508690601f841160011461451d579280928192600080516020614b9f8339815191529c9d9e600298979694614512575b50501b916000199060031b1c19161790555b519101556145078251938385948552840190614116565b9033908301520390a2565b0151925038806144de565b9193949b601f198416868452888420935b81811061457e575091600080516020614b9f8339815191529b9c9d95939185600298969410614565575b505050811b0190556144f0565b015160001960f88460031b161c19169055388080614558565b8284015185559386019392890192890161452e565b848252878220601f850160051c8101918986106145cf575b601f0160051c019083905b8281106145c45750506144ae565b8381550183906145b6565b90915081906145ab565b634e487b7160e01b81526041600452602490fd5b634e487b7160e01b82526004829052602482fd5b634e487b7160e01b82526041600452602482fd5b8115612397570690565b600052600b602052600560406000200154421190565b8054600160401b8110156105e05761465291600182018155614217565b819291549060031b91821b91600019901b1916179055565b8051156142015760200190565b80518210156142015760209160051b010190565b6001600160401b0381116105e05760051b60200190565b906146ac8261468b565b6146b9604051918261402a565b82815280926146ca601f199161468b565b0190602036910137565b908152602081019190915260609190911b6001600160601b031916604082015260540190565b6000818152602090600b8252604091600783832001549060ff821615614a2457848352600b8152838320546001600160a01b031615614a1357848352601a815260ff8484205416614a0257848352600e8152838320918451808484829654938481520190875284872092875b868282106149ec5750505061477d9250038461402a565b8251156149db5760081c60ff16916147948361413b565b6001928084036147e857506147df90613d30601b948751858101906147bf81613d1a334442876146d4565b51902090898852601a86528888209060ff19825416179055825190614615565b51948352522055565b6147f48194939461413b565b600281036148d757506000198261480b83516146a2565b92869287925b614855575b505050916147df9161483b601b9594885186810190613d2881613d1a334442876146d4565b91888752601a85528787209060ff19825416179055614677565b81518310156148d25790829161486c879483614677565b5194858a52600c895260038b8b200154918083106000146148a257505061489990928495613ca58861466a565b92919091614811565b809492969196146148b8575b50614899906143cc565b856148cb91613ca561489994988a614677565b94906148ae565b614816565b6148e08161413b565b61499c5783826148f083516146a2565b92869287925b61491f57505050916147df9161483b601b9594885186810190613d2881613d1a334442876146d4565b81518310156148d257908291614936879483614677565b5194858a52600c895260038b8b2001549180831160001461496c57505061496390928495613ca58861466a565b929190916148f6565b80949296919614614982575b50614963906143cc565b8561499591613ca561496394988a614677565b9490614978565b845162461bcd60e51b8152600481018490526018602482015277556e737570706f727465642070726f6a656374207479706560401b6044820152606490fd5b8451630ecc544160e01b8152600490fd5b8554845260019586019589955093019201614766565b83516322989cbd60e01b8152600490fd5b83516338fde52b60e01b8152600490fd5b8351630bf2fc7b60e01b8152600490fd5b600260015414614a46576002600155565b604051633ee5aeb560e01b8152600490fd5b906005811015610b9c57600052602052604060002090565b906004811015610b9c5761ff0082549160081b169061ff001916179055565b90614a998261468b565b604090614aa88251918261402a565b8381528093614ab9601f199161468b565b019160005b838110614acb5750505050565b6020908251614ad981613fd8565b6000815282600081830152606080868401528083015260006080830152600060a0830152600060c0830152600060e0830152600061010083015260006101208301526000610140830152828601015201614abe565b6005811015610b9c578015614b785760018114614b725760028114614b6c5760038114614b6657600414614b6157600090565b606490565b50605090565b50603c90565b50602890565b5060149056fe2ffcfee146bc0d5ff304c6b65111a0d485af9456dc64eee7d66ebdcc90b223eaba7e9a25519687065d49814c75a4208fc85d81d4cfba5f3198a89cd07701616a8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09387a67c118c0d96e34edb1836eeeb497f37c38bc114dc63dc66c1deb019972fa2646970667358221220643a8baa63a43284aa15bad36ab34afd285db741b4ba727b0942a36e39087ce164736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c9081630c5dfcd714613b2a57508063105ad5ac14613acc578063107046bd146139e457806310a6b7661461399b578063147df50d1461396a5780631a46ceee1461382657806321b4b5aa1461372757806324f7023e146136d657806333209e65146132f65780633fafa127146132d857806341ad56921461329e5780634423c5f1146132165780634862ce47146131e557806349fcd2f6146131b557806354fd4d50146131975780635583370114612f4d578063564a565d14612eb257806360fe2a7514612e8a5780636b57f26214612e4b57806370d29c1114612e2d578063715018a614612de6578063774b921314612db557806380d0382914612ca357806382c1034614612a6b57806382d9eb3114612a4f5780638baa3f4d14612a035780638d2d0d5c146129b65780638da5cb5b1461298d5780638edd4d241461296f578063936cf6dd1461292d5780639c32c447146126605780639cd43bd6146118875780639e491c5714611fe55780639e6dc9c114611f27578063a28889e114611f09578063a6b0293914611a43578063a84cfba6146118c1578063a9a35a9b14611887578063b032518414611834578063b40a562714611816578063b75953cd146117ea578063b9382531146114fa578063bee5cdca1461138d578063c0574ff214611186578063c15dc66314611063578063c374df5414610faf578063c637144114610f66578063cc21bb2114610f0e578063cdab953214610d28578063cdd4c85714610c3a578063cff29dfd14610bd6578063d198fe5514610a5a578063d816dbbe146109e8578063df9a4f561461096c578063e55e4211146107d4578063e6116cfd14610693578063e91b0a411461062c578063ef3a685c146104c0578063f2ef441b146103375763f2fde38b146102be573861000f565b34610332576020366003190112610332576102d76141ba565b6102df61438f565b6001600160a01b03908116908115610319576000548260018060a01b031982161760005516600080516020614bbf833981519152600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b34610332576000366003190112610332576003805460016000815b83811115610483575061036490614a8f565b92600090825b848111156103845760405180610380888261423c565b0390f35b806000526020600b8152604060002090600782015460ff91828216806103b8575b50505050506103b3906143cc565b61036a565b916103b39597939161047895936006604051956103d487613fd8565b80546001600160a01b0390811688528d820154948801949094526103fa6002820161404d565b604088015261040a8b820161404d565b606088015260048101546080880152600581015460a0880152015460c0860152151560e0850152828260081c166104408161413b565b6101008501528160101c1661012084015260b01c161515610140820152610467828a614677565b526104728189614677565b506143cc565b9290878080806103a5565b80600052600b60205260ff600760406000200154166104ab575b6104a6906143cc565b610352565b906104b86104a6916143cc565b91905061049d565b3461033257602080600319360112610332576004359081600052600b815260406000209160018060a01b0380845416330361061a578254938415610608576007019360ff855460b01c166105f65760405194848601904282524460408801523360601b60608801528460748801526074875260a087019387851060018060401b038611176105e0576105886105837fa726f44c951dc5b9682833688ff307aa831c8736f8edf5a12bcb962a5a6c3d0995899561001b9b8a99604052519020614615565b6141e6565b90549060031b1c169061059b82826143e8565b805460ff60b01b1916600160b01b179055604051908152a26f105551125513d497d054d4d251d3915160821b604051926105d48461400f565b6010845283015261440f565b634e487b7160e01b600052604160045260246000fd5b60405163eebbc53960e01b8152600490fd5b60405163f3ded74d60e01b8152600490fd5b6040516314f9fa3360e31b8152600490fd5b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b031615610681576000526014602052602060ff604060002054166040519061067d8161413b565b8152f35b60405163a1e549e960e01b8152600490fd5b3461033257602080600319360112610332576106ad6141ba565b906106b661438f565b6001600160a01b03918216600081815260188352604090205490919060ff16156107c25760008281526018825260408120805460ff191690555b81548082101561001b57849084610706846141e6565b939054600394851b1c1614610725575050610720906143cc565b6106f0565b9094929350600019918282019182116107ac5761075584610748610774946141e6565b905490891b1c16916141e6565b90919082549060031b9160018060a01b03809116831b921b1916179055565b82548015610796570192610787846141e6565b8154921b9290921b1916905555005b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6040516357fb4f9560e01b8152600490fd5b346103325760403660031901126103325760043560243590600482101561033257806000526020906010825260406000209260018060a01b0380600386015416330361095a576005850180549060ff8216610948578361083e91600160ff19809516178155614a70565b60018303610902575060018501546000526011845260406000205416600052600f8352604060002054600052600d835260036040600020018054806108d7575b505092600191600080516020614b7f8339815191528461001b965b6108a6604051809261422f565ba20154600052601281526040600020546f111254d415551157d49154d3d315915160821b604051926105d48461400f565b909491929060001981019081116107ac57909455929081600080516020614b7f83398151915261087e565b60019391508483600080516020614b7f83398151915292600261001b99961461092c575b50610899565b8686015460005260148352604060002090815416905588610926565b60405163f10068b560e01b8152600490fd5b604051631994c7ed60e01b8152600490fd5b34610332576020366003190112610332576109856141ba565b61098d61438f565b6001600160a01b03811660008181526018602052604090205460ff166105f65760005260186020526040600020600160ff1982541617905560205490600160401b8210156105e05761075582600161001b94016020556141e6565b34610332576109f6366141d0565b90600052601f602052604060002090815481101561033257610a1791614373565b5080546001600160a01b03166002610a316001840161404d565b920154610a506040519384938452606060208501526060840190614116565b9060408301520390f35b3461033257610a6836614145565b90806000526020906011825260018060a01b0380604060002054161561068157816000526014835260ff60406000205416610aa28161413b565b610bc4578160005260128352604060002054600052600b835260076040600020015460101c163303610bb257806000526015825260ff604060002054166005811015610b9c576005841015610b9c57831115610b8a57807f366cfc0ceb7ff5abe6877a6b905e43a50db357b10cfee9c848f9afa5e0d2eb928361001b958360005260168252610b35816040600020614a58565b600160ff19825416179055610b4d6040518092614366565ba260005260128152604060002054711352531154d513d39157d054141493d5915160721b60405192610b7e8461400f565b6012845283015261440f565b6040516302e845cd60e61b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b60405163a3ac7c2560e01b8152600490fd5b60405163fcf6007160e01b8152600490fd5b3461033257602036600319011261033257600435600052600d60205260a06040600020805490600180841b0360018201541690600281015460ff60046003840154930154169260405194855260208501526040840152606083015215156080820152f35b34610332576040366003190112610332576024356001600160a01b03818116916004359083900361033257610c6d61438f565b80600052601060205260406000209160ff6005840154166109485760038301908154908116610d16576001600160a01b031916841790556040519283526001927ffe47a7b6d774b16667067d1b3ec619c5932345a4a17a0795732fdf9426e366cc90602090a20154600052601260205261001b60406000205460405190610cf38261400f565b601182527013515112505513d497d054d4d251d39151607a1b602083015261440f565b60405163b21ee3bd60e01b8152600490fd5b3461033257610d3636614334565b9060405190602091828101908282523360601b6040820152610d756054828751610d65818484018a8c016140f3565b810103603481018452018261402a565b5190206000818152601d84526040808220805460ff19166001908117909155601c8652912085519295909291906001600160401b0383116105e057610dba8454613f67565b601f8111610ec5575b508590601f8411600114610e4957938380600080516020614bdf83398151915295899561001b9b958a99600094610e3e575b50501b916000199060031b1c19161790555b604051908152a27210d3d4949554151253d397d4915413d4951151606a1b60405192610e328461400f565b6013845283015261440f565b015192508c80610df5565b90601f9392931983169185600052876000209260005b818110610eb057509361001b9993889793600080516020614bdf8339815191529793838c9810610e97575b505050811b019055610e07565b015160001960f88460031b161c191690558a8080610e8a565b82840151855593860193928901928901610e5f565b8460005286600020601f850160051c810191888610610f04575b601f0160051c019083905b828110610ef8575050610dc3565b60008155018390610eea565b9091508190610edf565b3461033257604036600319011261033257610f276141ba565b6001600160a01b031660009081526008602052604090208054602435919082101561033257602091610f5891614217565b90546040519160031b1c8152f35b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b0316156106815760005260126020526020604060002054604051908152f35b3461033257602080600319360112610332576001600160a01b03610fd16141ba565b1660005260088152604060002060405190818382549182815201908192600052846000209060005b8682821061104f57868661100f8288038361402a565b604051928392818401908285525180915260408401929160005b82811061103857505050500390f35b835185528695509381019392810192600101611029565b835485529093019260019283019201610ff9565b346103325760208060031936011261033257600435600052601f81526040600020908154916110918361468b565b9261109f604051948561402a565b8084528284018092600052836000206000915b83831061113c5750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106110ed5785850386f35b909192938280600192603f19898203018552875190848060a01b0382511681526040806111268585015160608088870152850190614116565b93015191015296019201960195929190926110e0565b60038660019260409998995161115181613ff4565b848060a01b03865416815261116785870161404d565b83820152600286015460408201528152019201920191909594956110b2565b61118f366141d0565b611197614a35565b60056111a381546143cc565b9283825582600052602093600c855260406000209180600052600b8652604060002091600783019460ff8654161561137b5792546001600160a01b0393908416330361061a57600385019485543403611369576002810192858454169081600052600f8b52604060002054600052600d8b5260ff600460406000200154166113575760005260118a5260406000209060018060a01b03198254161790558154600052601289528360406000205581546000526014895260406000209560ff1996878154169055825460005260158a5260406000208781541690558054835460005260138b52806040600020556014810290808204601414901517156107ac57606490046000808080848b8a541682821561134e575bf115611342576113319686957fcc761dea67d3ed7501831391a5b0f6be67778c11bc18cb0bc7eb8d2019253bb1956060950160018b825416179055541691546040519283528b8301526040820152a2604051906113148261400f565b600c82526b1093d39117d055d05491115160a21b8783015261440f565b815416905560018055604051908152f35b6040513d6000823e3d90fd5b506108fc6112b8565b60405163a2c9d92760e01b8152600490fd5b60405163326a9b2960e01b8152600490fd5b604051630bf2fc7b60e01b8152600490fd5b346103325760203660031901126103325760043560035481116114e857600052600b60205260ff6040600020604051906113c682613fd8565b80546001600160a01b03908116835260018201546020840190815291906113ef6002830161404d565b93604081019485526114036003840161404d565b91606082019283526004840154916080810192835260058501549560a082019687526114be600760068801549760c0850198895201549860e08401988b8b1615158a526114ab8c8c60081c16966114598861413b565b61010099888b8901526101209e8f9e8f848260101c16908b015260b01c161515610140890152519a51935192519b5115159551966114968961413b565b51169751996040519d8e9d8e528d0190614116565b9160208c01528a820360408c0152614116565b966060890152608088015260a08701526114d78161413b565b60c086015260e08501528301520390f35b604051632af342d760e21b8152600490fd5b346103325761150836614145565b611510614a35565b8160005260119160209183835260018060a01b0380604060002054161561068157826000526014845260ff906001826040600020541661154f8161413b565b146117d85783600052601485526002826040600020541661156f8161413b565b146117c6578360005260128552604060002054600052600b855260406000208181541633036117b457846000526015865282604060002054166005811015610b9c576005851015610b9c578411156117a2576007015460b01c8216611773575b83600052601585526115e78260406000205416614b2e565b6115f084614b2e565b90856000526013875260406000205490820391821161175e5781810291818304149015171561174957606490049586928560005260158752604060002060ff199182825416908716179055600485146116de575b50600080938193829388845289526040832054168282156116d5575bf115611342577f9038e8201f7dbe27b4bcc817a2873036b611a77262be4638500536e6815b579760406116cf956116a08594835192835287830190614366565ba2600052601281526040600020546f1410565351539517d49153115054d15160821b604051926105d48461400f565b60018055005b506108fc611660565b909192506014865260016040600020918254161790558085528160406000205416600052600f8552604060002054600052600d855260036040600020018054906001820180921161173457558591906000611644565b82634e487b7160e01b60005260045260246000fd5b86634e487b7160e01b60005260045260246000fd5b87634e487b7160e01b60005260045260246000fd5b83600052601685528161178a846040600020614a58565b54166115cf5760405163b755348d60e01b8152600490fd5b60405163fb981fdd60e01b8152600490fd5b604051637ccfb14360e11b8152600490fd5b6040516377f1b37360e01b8152600490fd5b604051633375d5c760e11b8152600490fd5b3461033257602036600319011261033257600435600052601b6020526020604060002054604051908152f35b34610332576000366003190112610332576020600454604051908152f35b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b031615610681576000526015602052602060ff604060002054166118856040518092614366565bf35b34610332576020366003190112610332576001600160a01b036118a86141ba565b1660005260096020526020604060002054604051908152f35b3461033257602080600319360112610332576118db6141ba565b600380546001600160a01b0392831693909290916001906000825b86811115611a09575061190890614a8f565b95600093835b8781111561192457604051806103808b8261423c565b80600052600b87526040600020828154169084821461194e575b5050611949906143cc565b61190e565b96611a0191600761194994996040519261196784613fd8565b8352898101548c84015261197d6002820161404d565b604084015261198d89820161404d565b606084015260048101546080840152600581015460a0840152600681015460c0840152015460ff90818116151560e0840152818160081c166119ce8161413b565b610100840152868160101c1661012084015260b01c1615156101408201526119f6828d614677565b52610472818c614677565b95908a61193e565b80600052600b865287856040600020541614611a2e575b611a29906143cc565b6118f6565b90611a3b611a29916143cc565b919050611a20565b346103325760a0366003190112610332576004356001600160401b03811161033257611a73903690600401614164565b6024356001600160401b03811161033257611a92903690600401614164565b906003608435101561033257815115611ef757805115611ee55760443515611ed35760643515611ec157611ac76003546143cc565b9081600355611ad8604435426143db565b9060405193611ae685613fd8565b33855283602086015260408501526060840152604435608084015260a083015260643560c0830152600160e0830152611b2060843561413b565b60843561010083015260006101208301526000610140830152600052600b60205260406000209060018060a01b0381511660018060a01b031983541617825560208101516001830155604081015191825160018060401b0381116105e057611b8b6002830154613f67565b601f8111611e7a575b506020601f8211600114611e0c5781929394600092611e01575b50508160011b916000199060031b1c19161760028201555b60608201518051906001600160401b0382116105e057611be96003840154613f67565b601f8111611dba575b50602090601f8311600114611d445791806101409492600794600092611d39575b50508160011b916000199060031b1c19161760038201555b6080840151600482015560a0840151600582015560c084015160068201550191611c5b60e08201511515846143bb565b610100810151611c6a8161413b565b611c738161413b565b835461ff00191660089190911b61ff0016178355610120810151611ca0906001600160a01b0316846143e8565b0151815460ff60b01b191690151560b01b60ff60b01b16179055600354604051338152606435602082015261001b919081907f0db710c469c97f053e348f5d284c47de30e140867a591571cde5c008435395a190606090611d0260843561413b565b6084356040820152a260405190611d188261400f565b600f82526e141493d29150d517d0d49150551151608a1b602083015261440f565b015190508680611c13565b906003840160005260206000209160005b601f1985168110611da2575092610140949260019260079583601f19811610611d89575b505050811b016003820155611c2b565b015160001960f88460031b161c19169055868080611d79565b91926020600181928685015181550194019201611d55565b600384016000526020600020601f840160051c810160208510611dfa575b601f830160051c82018110611dee575050611bf2565b60008155600101611dd8565b5080611dd8565b015190508480611bae565b6002830160005260206000209060005b601f1984168110611e625750600193949583601f19811610611e49575b505050811b016002820155611bc6565b015160001960f88460031b161c19169055848080611e39565b9091602060018192858a015181550193019101611e1c565b600283016000526020600020601f830160051c810160208410611eba575b601f830160051c82018110611eae575050611b94565b60008155600101611e98565b5080611e98565b604051630757bfc960e21b8152600490fd5b6040516329fc802760e11b8152600490fd5b6040516352ddcdef60e11b8152600490fd5b60405163d937d5df60e01b8152600490fd5b34610332576000366003190112610332576020600654604051908152f35b346103325760203660031901126103325760043560005260076020526040600020805461038060018060a01b03600184015416926002810154611f6c6003830161404d565b91611fcb611f7c6004830161404d565b611fbd600584015495611f99600760ff600688015416960161404d565b956040519a8b9a8b5260208b015260408a01526101008060608b0152890190614116565b908782036080890152614116565b9260a0860152151560c085015283820360e0850152614116565b346103325760a0366003190112610332576044356001600160401b03811161033257612015903690600401614164565b6064356001600160401b03811161033257612034903690600401614164565b906084356001600160401b03811161033257612054903690600401614164565b600435158015612653575b6126415760646024351161262f57600435600052600c6020526004356040600020540361261d57600435600052600c60205260018060a01b036002604060002001541690604051906120b082613fa1565b600435825282602083015260243560408301528360608301528460808301524260a083015260466024351060c083015260e08201526004356000526007602052604060002090805182556001820160018060a01b0360208301511660018060a01b031982541617905560408101516002830155606081015180519060018060401b0382116105e05781906121476003860154613f67565b601f81116125ca575b50602090601f83116001146125585760009261254d575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b0382116105e0576121a26004850154613f67565b601f8111612506575b50602090601f83116001146124935760e093929160009183612488575b50508160011b916000199060031b1c19161760048401555b60a081015160058401556121fd60c08201511515600685016143bb565b01518051906001600160401b0382116105e05761221d6007840154613f67565b601f8111612441575b50602090601f83116001146123d15760079291600091836123c6575b50508160011b916000199060031b1c1916179101555b8060005260086020526122716024356040600020614635565b8060005260086020526040600020926040518085602082975493848152019060005260206000209260005b8181106123ad5750506122b19250038561402a565b600091825b85518410156122e3576122d76122dd916122d08689614677565b51906143db565b936143cc565b926122b6565b85518591811561239757836000526009602052046040600020557fb6d80c1873652a94be51d53ef11064e3eb6a764aa55b20de2879ebafb93856426040516024358152604060208201528061233f600435946040830190614116565b0390a36046602435101561234f57005b7f31f7ed45332d961cfcecc0de0d966ebaff75c4f5aa9da02e92415f453f04ba9f61238560405192604084526040840190614116565b916000602082015280600435930390a2005b634e487b7160e01b600052601260045260246000fd5b845483526001948501948994506020909301920161229c565b015190508780612242565b906007840160005260206000209160005b601f19851681106124295750918391600193600795601f19811610612410575b505050811b01910155612258565b015160001960f88460031b161c19169055878080612402565b919260206001819286850151815501940192016123e2565b600784016000526020600020601f840160051c810160208510612481575b601f830160051c82018110612475575050612226565b6000815560010161245f565b508061245f565b0151905088806121c8565b906004850160005260206000209160005b601f19851681106124ee575091839160019360e09695601f198116106124d5575b505050811b0160048401556121e0565b015160001960f88460031b161c191690558880806124c5565b919260206001819286850151815501940192016124a4565b600485016000526020600020601f840160051c810160208510612546575b601f830160051c8201811061253a5750506121ab565b60008155600101612524565b5080612524565b015190508780612167565b9250600385016000526020600020906000935b601f19841685106125af576001945083601f19811610612596575b505050811b01600383015561217f565b015160001960f88460031b161c19169055878080612586565b8181015183556020948501946001909301929091019061256b565b909150600385016000526020600020601f840160051c810160208510612616575b90849392915b601f830160051c82018110612607575050612150565b600081558594506001016125f1565b50806125eb565b60405163ac96c2bd60e01b8152600490fd5b6040516330cdce3160e21b8152600490fd5b60405163057a142160e41b8152600490fd5b506004546004351161205f565b346103325761266e36614334565b90806000526020906011825260018060a01b039283604060002054161561068157816000526014835260ff604060002054166126a98161413b565b610bc4578160005260128352604060002054600052600b8352836040600020541633141580612914575b612902576126e26006546143cc565b600681905560405190916001600160401b0360e08301818111848210176105e05760405283835285830196858852604084013381526060850190600082526080860194855260a086019960008b5260c08701976000895260005260108a5260406000209651875551926001938488015580600288019251169160018060a01b03199283825416179055600387019251169082541617905560048401925180519283116105e0576127928454613f67565b601f81116128b9575b508790601f841160011461284b5792806005959381936127db9896600094612840575b50501b916000199060031b1c19161790555b0194511515856143bb565b51926004841015610b9c5761001b936127f391614a70565b600052601481526040600020600260ff19825416179055601281526040600020546e111254d415551157d0d49150551151608a1b604051926128348461400f565b600f845283015261440f565b015192508c806127be565b90601f9392931983169185600052896000209260005b8b8282106128a5575050916127db979593918560059896941061288c575b505050811b0190556127d0565b015160001960f88460031b161c191690558a808061287f565b838501518655948701949384019301612861565b8460005288600020601f850160051c8101918a86106128f8575b601f0160051c019083905b8281106128ec57505061279b565b600081550183906128de565b90915081906128d3565b60405163cf7ea67d60e01b8152600490fd5b50816000526011835283604060002054163314156126d3565b3461033257602036600319011261033257600435602054811015610332576129566020916141e6565b905460405160039290921b1c6001600160a01b03168152f35b34610332576000366003190112610332576020600554604051908152f35b34610332576000366003190112610332576000546040516001600160a01b039091168152602090f35b34610332576040366003190112610332576001600160a01b036129d76141ba565b1660005260176020526040600020602435600052602052602060ff604060002054166040519015158152f35b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b0390811615610681576020916000526011825260406000205416604051908152f35b346103325760203660031901126103325761001b6004356146fa565b346103325760208060031936011261033257612a856141ba565b6004546001600160a01b03929160009190841660015b82811115612c665750612aad8361468b565b92612abb604051948561402a565b808452612aca601f199161468b565b018460005b828110612c275750505060009060015b83811115612b8b575050505060405191808301818452825180915260408401918060408360051b8701019401926000965b838810612b1d5786860387f35b90919293948380600192603f198a820301865288519081518152828201518382015285604083015116604082015260608083015190820152612b6e6080808401519060c08091850152830190614116565b9160a0809101511515910152970193019701969093929193612b10565b80600052600c865260406000208760028201541690838214612bb8575b5050612bb3906143cc565b612adf565b93612c1f9160ff6005612bb3959760405193612bd385613fbd565b8154855260018201548d860152604085015260038101546060850152612bfb6004820161404d565b6080850152015416151560a0820152612c148289614677565b526104728188614677565b929088612ba8565b604051612c3381613fbd565b600081526000838201526000604082015260606000818301526080820152600060a0820152828288010152018590612acf565b80600052600c855281866002604060002001541614612c8e575b612c89906143cc565b612a9b565b92612c9b612c89916143cc565b939050612c80565b346103325760003660031901126103325760038054612cc181614a8f565b9060005b818110612cda5760405180610380858261423c565b600190818101918282116107ac57612db092600052602090600b82526007604060002060405193612d0a85613fd8565b81546001600160a01b0390811686529382015490850152612d2d6002820161404d565b6040850152612d3d89820161404d565b606085015260048101546080850152600581015460a0850152600681015460c0850152015460ff91828216151560e0850152828260081c16612d7e8161413b565b6101008501528160101c1661012084015260b01c161515610140820152612da58286614677565b526104728185614677565b612cc5565b3461033257612dc3366141d0565b906000526019602052604060002080548210156103325760209161295691614217565b3461033257600036600319011261033257612dff61438f565b600080546001600160a01b0319811682556001600160a01b0316600080516020614bbf8339815191528280a3005b34610332576000366003190112610332576020600a54604051908152f35b34610332576020366003190112610332576001600160a01b03612e6c6141ba565b166000526018602052602060ff604060002054166040519015158152f35b34610332576020366003190112610332576020612ea860043561461f565b6040519015158152f35b3461033257602036600319011261033257600435600052601060205260406000208054600182015491610380612f3160018060a01b039283600282015416936003820154166005612f056004840161404d565b92015494604051978897885260208801526040870152606086015260e0608086015260e0850190614116565b9160ff8116151560a085015260ff60c085019160081c1661422f565b346103325760208060031936011261033257612f6761438f565b600435600052600d81526004604060002001906001918260ff1982541617905560405190612f948261400f565b601282527110925111115497d0931050d2d31254d5115160721b8183015260008052601f8152604060002060405190612fcc82613ff4565b33825282820184815260408301914283528054600160401b8110156105e057612ff9918882018155614373565b939093613181575183546001600160a01b0319166001600160a01b039190911617835551805195808401916001600160401b0388116105e05761303c8354613f67565b601f8111613138575b508590601f89116001146130ba5792888060009a6002956130a49a9895600080516020614b9f8339815191529c9a988e946130af575b50501b918b199060031b1c19161790555b51910155604051928392604084526040840190614116565b9033908301520390a2005b015192508d8061307b565b9790601f1982169884600052876000209960005b81811061312357509260009a600080516020614b9f8339815191529a98969360029693836130a49c9a971061310b575b505050811b01905561308c565b01518c1960f88460031b161c191690558b80806130fe565b838301518c559a85019a9289019289016130ce565b8360005286600020601f8a0160051c810191888b10613177575b601f0160051c019083905b82811061316b575050613045565b6000815501839061315d565b9091508190613152565b634e487b7160e01b600052600060045260246000fd5b34610332576000366003190112610332576020600254604051908152f35b34610332576020366003190112610332576004356005811015610332576131dd602091614b2e565b604051908152f35b34610332576131f3366141d0565b90600052600e6020526040600020805482101561033257602091610f5891614217565b3461033257602036600319011261033257600435600052600c6020526040600020805460018201549161329260018060a01b0360028301541691600381015460ff60056132656004850161404d565b9301541693604051968796875260208701526040860152606085015260c0608085015260c0840190614116565b90151560a08301520390f35b34610332576020366003190112610332576001600160a01b036132bf6141ba565b16600052600f6020526020604060002054604051908152f35b34610332576000366003190112610332576020600354604051908152f35b34610332576060366003190112610332576001600160401b0360243581811161033257613327903690600401614164565b60043580600052602091600b8352604060002033600052600f8452604060002054600052600d84526040600020913360005260178552604060002084600052855260ff604060002054166136c45760ff6004840154166136b25781546001600160a01b039690871633146136a05733600052600f86526040600020541561368e57600783019160ff8354161561137b5785600052600b875287604060002054161561367c576133d58661461f565b61366a5760ff6133e66004546143cc565b93846004555460081c16936133fa8561413b565b6001809514613646575b506040519761341289613fbd565b8389528789019087825260408a019033825260608b0192604435845260808c0194855260a08c019660008852600052600c8b5260406000209b518c5551878c015560028b0191511660018060a01b0319825416179055516003890155519081519081116105e05760048801916134888354613f67565b601f81116135fd575b508790601f831160011461358b57936134d8938361001b9b9460059460029a9998600092613580575b5050600019600383901b1c191690871b1790555b51151591016143bb565b3360005260178552604060002084600052855260406000209060ff19825416179055600e845261350f604060002060045490614635565b0161351a81546143cc565b90556004547fb5cc2e6a75ba593196ae1600d90399014d2790179ceae0b5d9a2303144028bad606060405184815233868201526044356040820152a26c10925117d4d550935255151151609a1b604051926135748461400f565b600d845283015261440f565b015190508d806134ba565b908360005288600020916000601f198516905b8181106135e8575096846005948298946134d8989461001b9f9860029d9c106135cf575b505050811b0190556134ce565b015160001960f88460031b161c191690558d80806135c2565b82840151855593880193928b01928b0161359e565b8360005288600020601f840160051c8101918a851061363c575b601f0160051c019086905b828110613630575050613491565b60008155018690613622565b9091508190613617565b60060154604435036136585788613404565b60405163162908e360e11b8152600490fd5b60405163bcdae46160e01b8152600490fd5b6040516338fde52b60e01b8152600490fd5b60405163172f3d1160e11b8152600490fd5b604051633246839360e11b8152600490fd5b604051636c14291560e11b8152600490fd5b60405163101713ef60e11b8152600490fd5b34610332576136e436614145565b6000828152601160205260409020546001600160a01b0316156106815761371b60ff91602093600052601684526040600020614a58565b54166040519015158152f35b34610332576020366003190112610332576004356000526007602052604060002060405161375481613fa1565b8154815260018201546001600160a01b03166020820152600282015460408201908152916103809060e061378a6003830161404d565b936060810194855261380e6137a16004850161404d565b966080830197885260058501549260a081019384526137d3600760ff6006890154169760c0840198151589520161404d565b9485910152519551965191519351151591613800604051988998895260c060208a015260c0890190614116565b908782036040890152614116565b926060860152608085015283820360a0850152614116565b3461033257600036600319011261033257336000526020600f81526040600020546139585733600052600f8152604060002054600052600d815260ff600460406000200154166139465761387b600a546143cc565b80600a5533600052600f82528060406000205560405160a0810181811060018060401b038211176105e057613916926004916040528083528483013381526040840160008152606085019160008352608086019360008552600052600d8852604060002095518655600186019060018060a01b0390511660018060a01b031982541617905551600285015551600384015551151591016143bb565b7ffe92b55fae486bedee58bf3b8551b5cd34508dd518b841a10424e3a6491a0ccc600a54916040519283523392a2005b604051631f7b776b60e01b8152600490fd5b604051632391379760e21b8152600490fd5b3461033257602036600319011261033257600435600052601a602052602060ff604060002054166040519015158152f35b34610332576020366003190112610332576004356000818152601160205260409020546001600160a01b0316156106815760005260136020526020604060002054604051908152f35b34610332576020366003190112610332576004356000908152600b6020526040902080546001820154916001600160a01b039182169160ff90613a296002840161404d565b90613a366003850161404d565b916004850154946005810154613a886007600684015493015495613a7a888860081c16956040519c8d9c8d5260208d015260408c61016091829101528c0190614116565b908a820360608c0152614116565b96608089015260a088015260c0870152838316151560e0870152613aab8161413b565b6101008601528160101c1661012085015260b01c1615156101408301520390f35b346103325760203660031901126103325760043580600052601a60205260ff6040600020541615613b185760035481116114e857600052601b6020526020604060002054604051908152f35b6040516308149b2360e31b8152600490fd5b34610332576020806003193601126103325760043580600052600b825260079081604060002001549260ff9485851615613f5857506000828152600b825260409020546001600160a01b03959086161561367c5782600052601a82528060406000205416613f465782600052600e8252604060002093604051808685829854938481520190600052856000209260005b87828210613f3057505050613bd19250038661402a565b845115613f1e57613be285516146a2565b9460009460005b8251811015613cb257613bfc8184614677565b518060005284875260466040600020604051613c1781613fa1565b815481528d6001830154168a82015260e0613c798960028501549460408501958652613c456003820161404d565b6060860152613c566004820161404d565b6080860152600581015460a08601528c600682015416151560c08601520161404d565b9101525110613c92575b50613c8d906143cc565b613be9565b87613cab91613ca5613c8d949a8c614677565b526143cc565b9690613c83565b878683898c898215613f0c5760009160081c16613cce8161413b565b60028103613dfd57505060001990613ce5816146a2565b916000956000915b838310613d8c5750505050613d3690613d3061001b9560405186810190613d2881613d1a334442876146d4565b03601f19810183528261402a565b519020614615565b90614677565b515b81600052601a83526040600020600160ff19825416179055601b83526040600020557410925117d1559053155055115117d5d2551217d353605a1b60405192613d808461400f565b6015845283015261440f565b613d968383614677565b519788600052600c885260036040600020015491808310600014613dcd575050613dc79092600198613ca58761466a565b91613ced565b80949299919914613de3575b50613dc7906143cc565b88613df691613ca5613dc7949b89614677565b9790613dd9565b613e068161413b565b80613ec5575050600090613e19816146a2565b916000956000915b838310613e545750505050613e4e90613d3061001b9560405186810190613d2881613d1a334442876146d4565b51613d38565b613e5e8383614677565b519788600052600c885260036040600020015491808311600014613e95575050613e8f9092600198613ca58761466a565b91613e21565b80949299919914613eab575b50613e8f906143cc565b88613ebe91613ca5613e8f949b89614677565b9790613ea1565b91600183613ed761001b98949561413b565b14613ee4575b5050613d38565b613f049250613d309060405186810190613d2881613d1a334442876146d4565b518480613edd565b604051636ca111ef60e01b8152600490fd5b604051630ecc544160e01b8152600490fd5b855484526001958601958b955093019201613bba565b6040516322989cbd60e01b8152600490fd5b630bf2fc7b60e01b8152600490fd5b90600182811c92168015613f97575b6020831014613f8157565b634e487b7160e01b600052602260045260246000fd5b91607f1691613f76565b61010081019081106001600160401b038211176105e057604052565b60c081019081106001600160401b038211176105e057604052565b61016081019081106001600160401b038211176105e057604052565b606081019081106001600160401b038211176105e057604052565b604081019081106001600160401b038211176105e057604052565b601f909101601f19168101906001600160401b038211908210176105e057604052565b906040519182600082549261406184613f67565b9081845260019485811690816000146140d0575060011461408d575b505061408b9250038361402a565b565b9093915060005260209081600020936000915b8183106140b857505061408b9350820101388061407d565b855488840185015294850194879450918301916140a0565b91505061408b94506020925060ff191682840152151560051b820101388061407d565b60005b8381106141065750506000910152565b81810151838201526020016140f6565b9060209161412f815180928185528580860191016140f3565b601f01601f1916010190565b60031115610b9c57565b6040906003190112610332576004359060243560058110156103325790565b81601f82011215610332578035906001600160401b0382116105e05760405192614198601f8401601f19166020018561402a565b8284526020838301011161033257816000926020809301838601378301015290565b600435906001600160a01b038216820361033257565b6040906003190112610332576004359060243590565b60205481101561420157602060005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b80548210156142015760005260206000200190600090565b906004821015610b9c5752565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410614271575050505050505090565b909192939495968580600192603f198582030187528a5190848060a01b039182815116825283810151848301526142cb6142b889830151610160808c870152850190614116565b6060808401519085830390860152614116565b926080808301519084015260a0808301519084015260c0808301519084015260e08083015115159084015261010080830151906143078261413b565b84015261012090818301511690830152610140809101511515910152990194019401929594939190614260565b9060406003198301126103325760043591602435906001600160401b0382116103325761436391600401614164565b90565b906005821015610b9c5752565b8054821015614201576000526003602060002091020190600090565b6000546001600160a01b031633036143a357565b60405163118cdaa760e01b8152336004820152602490fd5b9060ff801983541691151516179055565b60001981146107ac5760010190565b919082018092116107ac57565b805462010000600160b01b03191660109290921b62010000600160b01b0316919091179055565b9190916000928184526020601f81526040908186209582519061443182613ff4565b338252828201858152848301914283528954600160401b811015614601576144609060019b8c82018155614373565b9490946145ed575184546001600160a01b0319166001600160a01b0391909116178455905180519099808501926001600160401b0383116145d9576144a58454613f67565b601f8111614593575b508690601f841160011461451d579280928192600080516020614b9f8339815191529c9d9e600298979694614512575b50501b916000199060031b1c19161790555b519101556145078251938385948552840190614116565b9033908301520390a2565b0151925038806144de565b9193949b601f198416868452888420935b81811061457e575091600080516020614b9f8339815191529b9c9d95939185600298969410614565575b505050811b0190556144f0565b015160001960f88460031b161c19169055388080614558565b8284015185559386019392890192890161452e565b848252878220601f850160051c8101918986106145cf575b601f0160051c019083905b8281106145c45750506144ae565b8381550183906145b6565b90915081906145ab565b634e487b7160e01b81526041600452602490fd5b634e487b7160e01b82526004829052602482fd5b634e487b7160e01b82526041600452602482fd5b8115612397570690565b600052600b602052600560406000200154421190565b8054600160401b8110156105e05761465291600182018155614217565b819291549060031b91821b91600019901b1916179055565b8051156142015760200190565b80518210156142015760209160051b010190565b6001600160401b0381116105e05760051b60200190565b906146ac8261468b565b6146b9604051918261402a565b82815280926146ca601f199161468b565b0190602036910137565b908152602081019190915260609190911b6001600160601b031916604082015260540190565b6000818152602090600b8252604091600783832001549060ff821615614a2457848352600b8152838320546001600160a01b031615614a1357848352601a815260ff8484205416614a0257848352600e8152838320918451808484829654938481520190875284872092875b868282106149ec5750505061477d9250038461402a565b8251156149db5760081c60ff16916147948361413b565b6001928084036147e857506147df90613d30601b948751858101906147bf81613d1a334442876146d4565b51902090898852601a86528888209060ff19825416179055825190614615565b51948352522055565b6147f48194939461413b565b600281036148d757506000198261480b83516146a2565b92869287925b614855575b505050916147df9161483b601b9594885186810190613d2881613d1a334442876146d4565b91888752601a85528787209060ff19825416179055614677565b81518310156148d25790829161486c879483614677565b5194858a52600c895260038b8b200154918083106000146148a257505061489990928495613ca58861466a565b92919091614811565b809492969196146148b8575b50614899906143cc565b856148cb91613ca561489994988a614677565b94906148ae565b614816565b6148e08161413b565b61499c5783826148f083516146a2565b92869287925b61491f57505050916147df9161483b601b9594885186810190613d2881613d1a334442876146d4565b81518310156148d257908291614936879483614677565b5194858a52600c895260038b8b2001549180831160001461496c57505061496390928495613ca58861466a565b929190916148f6565b80949296919614614982575b50614963906143cc565b8561499591613ca561496394988a614677565b9490614978565b845162461bcd60e51b8152600481018490526018602482015277556e737570706f727465642070726f6a656374207479706560401b6044820152606490fd5b8451630ecc544160e01b8152600490fd5b8554845260019586019589955093019201614766565b83516322989cbd60e01b8152600490fd5b83516338fde52b60e01b8152600490fd5b8351630bf2fc7b60e01b8152600490fd5b600260015414614a46576002600155565b604051633ee5aeb560e01b8152600490fd5b906005811015610b9c57600052602052604060002090565b906004811015610b9c5761ff0082549160081b169061ff001916179055565b90614a998261468b565b604090614aa88251918261402a565b8381528093614ab9601f199161468b565b019160005b838110614acb5750505050565b6020908251614ad981613fd8565b6000815282600081830152606080868401528083015260006080830152600060a0830152600060c0830152600060e0830152600061010083015260006101208301526000610140830152828601015201614abe565b6005811015610b9c578015614b785760018114614b725760028114614b6c5760038114614b6657600414614b6157600090565b606490565b50605090565b50603c90565b50602890565b5060149056fe2ffcfee146bc0d5ff304c6b65111a0d485af9456dc64eee7d66ebdcc90b223eaba7e9a25519687065d49814c75a4208fc85d81d4cfba5f3198a89cd07701616a8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09387a67c118c0d96e34edb1836eeeb497f37c38bc114dc63dc66c1deb019972fa2646970667358221220643a8baa63a43284aa15bad36ab34afd285db741b4ba727b0942a36e39087ce164736f6c63430008140033",
  "devdoc": {
    "author": "BuidlGuidl",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bidEvaluationWithML(uint256)": {
        "details": "Override bid evaluation to include ML risk assessment",
        "params": {
          "_projectId": "The project ID"
        }
      },
      "getBidderAverageRisk(address)": {
        "details": "Get bidder's average risk score",
        "params": {
          "_bidder": "The bidder's address"
        },
        "returns": {
          "_0": "Average risk score"
        }
      },
      "getBidderRiskHistory(address)": {
        "details": "Get bidder's risk history",
        "params": {
          "_bidder": "The bidder's address"
        },
        "returns": {
          "_0": "Array of risk scores"
        }
      },
      "getRiskAssessment(uint256)": {
        "details": "Get risk assessment for a specific bid",
        "params": {
          "_bidId": "The ID of the bid"
        },
        "returns": {
          "approved": "Whether the assessment was approved",
          "mlModelVersion": "The version of the ML model used",
          "recommendation": "The ML recommendation",
          "riskCategory": "The risk category (Low/Medium/High)",
          "riskScore": "The risk score (0-100)",
          "timestamp": "When the assessment was created"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "submitRiskAssessment(uint256,uint256,string,string,string)": {
        "details": "Submit ML risk assessment for a bid",
        "params": {
          "_bidId": "The ID of the bid to assess",
          "_mlModelVersion": "Version of ML model used",
          "_recommendation": "ML recommendation",
          "_riskCategory": "Risk category (Low/Medium/High)",
          "_riskScore": "Risk score from 0-100"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 452,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 455,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "projectId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 458,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 461,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 464,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "disputeCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 469,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidRiskAssessments",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(RiskAssessment)585_storage)"
      },
      {
        "astId": 474,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidderRiskHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 478,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidderAverageRisk",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 606,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidderCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 611,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "projects",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Project)502_storage)"
      },
      {
        "astId": 616,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bids",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Bid)515_storage)"
      },
      {
        "astId": 621,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidders",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Bidder)526_storage)"
      },
      {
        "astId": 626,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "projectBids",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 630,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidderIds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 635,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "disputes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(Dispute)568_storage)"
      },
      {
        "astId": 639,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondObligor",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 643,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondProjectId",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 647,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 652,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondStatus",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_enum(ProjectStatus)589)"
      },
      {
        "astId": 657,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondCompletion",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_enum(ProjectCompletion)599)"
      },
      {
        "astId": 664,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondMilestoneApproved",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(ProjectCompletion)599,t_bool))"
      },
      {
        "astId": 670,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "hasBidded",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 674,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "approvedAuditors",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 679,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "projectAuditors",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 683,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "evaluatedbids",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 687,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondWinners",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 691,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "reportDescriptions",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 695,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "whistleblowerReports",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 699,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "whistleblowerRewards",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 712,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "transparencyLogs",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_uint256,t_array(t_struct(LogEntry)706_storage)dyn_storage)"
      },
      {
        "astId": 743,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "approvedAuditorsList",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LogEntry)706_storage)dyn_storage": {
        "base": "t_struct(LogEntry)706_storage",
        "encoding": "dynamic_array",
        "label": "struct TrustChain.LogEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(DisputeOutcome)604": {
        "encoding": "inplace",
        "label": "enum TrustChain.DisputeOutcome",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectClassfication)593": {
        "encoding": "inplace",
        "label": "enum TrustChain.ProjectClassfication",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectCompletion)599": {
        "encoding": "inplace",
        "label": "enum TrustChain.ProjectCompletion",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectStatus)589": {
        "encoding": "inplace",
        "label": "enum TrustChain.ProjectStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ProjectCompletion)599,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(ProjectCompletion)599",
        "label": "mapping(enum TrustChain.ProjectCompletion => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(LogEntry)706_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.LogEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LogEntry)706_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(ProjectCompletion)599)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum TrustChain.ProjectCompletion)",
        "numberOfBytes": "32",
        "value": "t_enum(ProjectCompletion)599"
      },
      "t_mapping(t_uint256,t_enum(ProjectStatus)589)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum TrustChain.ProjectStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ProjectStatus)589"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(ProjectCompletion)599,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum TrustChain.ProjectCompletion => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(ProjectCompletion)599,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Bid)515_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)515_storage"
      },
      "t_mapping(t_uint256,t_struct(Bidder)526_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.Bidder)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidder)526_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)568_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)568_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)502_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)502_storage"
      },
      "t_mapping(t_uint256,t_struct(RiskAssessment)585_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.RiskAssessment)",
        "numberOfBytes": "32",
        "value": "t_struct(RiskAssessment)585_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)515_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.Bid",
        "members": [
          {
            "astId": 504,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 506,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 508,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidder",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 510,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 512,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "proposalIPFHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 514,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "accepted",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Bidder)526_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.Bidder",
        "members": [
          {
            "astId": 517,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 519,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidderAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 521,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "totalBids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 523,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "reputationScore",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 525,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "blacklisted",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Dispute)568_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.Dispute",
        "members": [
          {
            "astId": 554,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "disputeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 556,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bondId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 558,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 560,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "mediator",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 562,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "evidence",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 564,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "resolved",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 567,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "outcome",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(DisputeOutcome)604"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(LogEntry)706_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.LogEntry",
        "members": [
          {
            "astId": 701,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "actor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 703,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "action",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 705,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Project)502_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.Project",
        "members": [
          {
            "astId": 480,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 482,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 484,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 486,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "title",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 488,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "timePeriod",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 490,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 492,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "budget",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 494,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "posted",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 497,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "projectType",
            "offset": 1,
            "slot": "7",
            "type": "t_enum(ProjectClassfication)593"
          },
          {
            "astId": 499,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "auditor",
            "offset": 2,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 501,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "hasAuditor",
            "offset": 22,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RiskAssessment)585_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.RiskAssessment",
        "members": [
          {
            "astId": 570,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 572,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 574,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "riskScore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 576,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "riskCategory",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 578,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "recommendation",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 580,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 582,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "approved",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 584,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "mlModelVersion",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}