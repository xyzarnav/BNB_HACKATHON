{
  "address": "0x490e75BcA322d927CC5a9ff9e2ACE91aa8c3e7D0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "milestone",
          "type": "uint8"
        }
      ],
      "name": "AuditorApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        }
      ],
      "name": "AuditorAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidderId",
          "type": "uint256"
        }
      ],
      "name": "BidderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPayment",
          "type": "uint256"
        }
      ],
      "name": "BondAwarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TrustChain.DisputeOutcome",
          "name": "outcome",
          "type": "uint8"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mediator",
          "type": "address"
        }
      ],
      "name": "MediatorAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "newCompletion",
          "type": "uint8"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TrustChain.ProjectClassfication",
          "name": "projectType",
          "type": "uint8"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "TransparencyLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "reportHash",
          "type": "bytes32"
        }
      ],
      "name": "WhistleblowerReport",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "_milestone",
          "type": "uint8"
        }
      ],
      "name": "approveCompletion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedAuditors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedAuditorsList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "assignAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_mediator",
          "type": "address"
        }
      ],
      "name": "assignMediator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidWinner",
          "type": "uint256"
        }
      ],
      "name": "awardBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_bidWiner",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "bidEvaluation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidderCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bidderIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalBids",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reputationScore",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "blacklisted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proposalIPFHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidderId",
          "type": "uint256"
        }
      ],
      "name": "blacklistBidder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondWinners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_proposalIPFHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createBidder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "createDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timeperiod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_budget",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectClassfication",
          "name": "_jobType",
          "type": "uint8"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mediator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "evidence",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        },
        {
          "internalType": "enum TrustChain.DisputeOutcome",
          "name": "outcome",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "evaluatedbids",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllActiveProjects",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "budget",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "posted",
              "type": "bool"
            },
            {
              "internalType": "enum TrustChain.ProjectClassfication",
              "name": "projectType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "auditor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasAuditor",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustChain.Project[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProjects",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "budget",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "posted",
              "type": "bool"
            },
            {
              "internalType": "enum TrustChain.ProjectClassfication",
              "name": "projectType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "auditor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasAuditor",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustChain.Project[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "getBidsByUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bidId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "proposalIPFHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "accepted",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustChain.Bid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        }
      ],
      "name": "getCompletionLevel",
      "outputs": [
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "_completion",
          "type": "uint8"
        }
      ],
      "name": "getCompletionPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectBidWinner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_bidWinnerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectById",
      "outputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "posted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectClassfication",
          "name": "projectType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectLogs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "actor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "action",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct TrustChain.LogEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getProjectsByCreator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "budget",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "posted",
              "type": "bool"
            },
            {
              "internalType": "enum TrustChain.ProjectClassfication",
              "name": "projectType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "auditor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasAuditor",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustChain.Project[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasBidded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "isProjectLate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectAuditors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectBids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "posted",
          "type": "bool"
        },
        {
          "internalType": "enum TrustChain.ProjectClassfication",
          "name": "projectType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "hasAuditor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auditor",
          "type": "address"
        }
      ],
      "name": "registerAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.ProjectCompletion",
          "name": "_newCompletion",
          "type": "uint8"
        }
      ],
      "name": "releasePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auditor",
          "type": "address"
        }
      ],
      "name": "removeAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "reportCorruption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "enum TrustChain.DisputeOutcome",
          "name": "_outcome",
          "type": "uint8"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transparencyLogs",
      "outputs": [
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9c955cd405a1af9239f79e77a437fcb06388b06a28601da29b6b9dd2d1136a9f",
  "receipt": {
    "to": null,
    "from": "0x54ebbDDA8046b34D635a3B2B25297B01AcED554f",
    "contractAddress": "0x490e75BcA322d927CC5a9ff9e2ACE91aa8c3e7D0",
    "transactionIndex": 0,
    "gasUsed": "4649137",
    "logsBloom": "0x00000000000000000000000000000000000000004000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400400000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000008000000000000000000008000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd93140d314577d36be88eecebb1f0706c785ada14b7c469023611a23cf000b45",
    "transactionHash": "0x9c955cd405a1af9239f79e77a437fcb06388b06a28601da29b6b9dd2d1136a9f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 62690045,
        "transactionHash": "0x9c955cd405a1af9239f79e77a437fcb06388b06a28601da29b6b9dd2d1136a9f",
        "address": "0x490e75BcA322d927CC5a9ff9e2ACE91aa8c3e7D0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054ebbdda8046b34d635a3b2b25297b01aced554f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd93140d314577d36be88eecebb1f0706c785ada14b7c469023611a23cf000b45"
      }
    ],
    "blockNumber": 62690045,
    "cumulativeGasUsed": "4649137",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f8b60b6c6e921fd2e3bc143410a6076c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"milestone\",\"type\":\"uint8\"}],\"name\":\"AuditorApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"AuditorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidderId\",\"type\":\"uint256\"}],\"name\":\"BidderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPayment\",\"type\":\"uint256\"}],\"name\":\"BondAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TrustChain.DisputeOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"}],\"name\":\"MediatorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"newCompletion\",\"type\":\"uint8\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"TransparencyLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reportHash\",\"type\":\"bytes32\"}],\"name\":\"WhistleblowerReport\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"_milestone\",\"type\":\"uint8\"}],\"name\":\"approveCompletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAuditors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedAuditorsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"assignAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mediator\",\"type\":\"address\"}],\"name\":\"assignMediator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidWinner\",\"type\":\"uint256\"}],\"name\":\"awardBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidWiner\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"bidEvaluation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalIPFHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidderId\",\"type\":\"uint256\"}],\"name\":\"blacklistBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_proposalIPFHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"createDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timeperiod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_budget\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"_jobType\",\"type\":\"uint8\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"evidence\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.DisputeOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"evaluatedbids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAuditor\",\"type\":\"bool\"}],\"internalType\":\"struct TrustChain.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAuditor\",\"type\":\"bool\"}],\"internalType\":\"struct TrustChain.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getBidsByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalIPFHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct TrustChain.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"}],\"name\":\"getCompletionLevel\",\"outputs\":[{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"_completion\",\"type\":\"uint8\"}],\"name\":\"getCompletionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectBidWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidWinnerId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectLogs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TrustChain.LogEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getProjectsByCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAuditor\",\"type\":\"bool\"}],\"internalType\":\"struct TrustChain.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasBidded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"isProjectLate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectAuditors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"posted\",\"type\":\"bool\"},{\"internalType\":\"enum TrustChain.ProjectClassfication\",\"name\":\"projectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAuditor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"registerAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.ProjectCompletion\",\"name\":\"_newCompletion\",\"type\":\"uint8\"}],\"name\":\"releasePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"removeAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"reportCorruption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"enum TrustChain.DisputeOutcome\",\"name\":\"_outcome\",\"type\":\"uint8\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transparencyLogs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BuidlGuidl\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrustChain.sol\":\"TrustChain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/TrustChain.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * A smart contract that allows changing a state variable of the contract and tracking the changes\\r\\n * It also allows the owner to withdraw the Ether in the contract\\r\\n * @author BuidlGuidl\\r\\n */\\r\\ncontract TrustChain is Ownable, ReentrancyGuard {\\r\\n    constructor() Ownable(msg.sender) {}\\r\\n\\r\\n    // Events\\r\\n    event BidderCreated(address indexed bidder, uint256 bidderId);\\r\\n    event ProjectCreated(uint256 indexed projectId, address creator, uint256 budget, ProjectClassfication projectType);\\r\\n    event BidSubmitted(uint256 indexed bidId, uint256 projectId, address bidder, uint256 amount);\\r\\n    event BondAwarded(uint256 indexed projectId, address bidder, uint256 amount, uint256 initialPayment);\\r\\n    event PaymentReleased(uint256 indexed bondId, uint256 amount, ProjectCompletion newCompletion);\\r\\n    // New transparency events\\r\\n    event AuditorAssigned(uint256 indexed projectId, address auditor);\\r\\n    event AuditorApproval(uint256 indexed bondId, ProjectCompletion milestone);\\r\\n    event MediatorAssigned(uint256 indexed disputeId, address mediator);\\r\\n    event DisputeResolved(uint256 indexed disputeId, DisputeOutcome outcome);\\r\\n    event WhistleblowerReport(uint256 indexed projectId, bytes32 reportHash);\\r\\n    event TransparencyLog(uint256 indexed projectId, string action, address actor);\\r\\n\\r\\n    uint256 public version = 4;\\r\\n    uint256 public projectId = 0;\\r\\n    uint256 public bidCount = 0;\\r\\n    uint256 public bondCount = 0;\\r\\n    uint256 public disputeCount = 0;\\r\\n\\r\\n    struct Project {\\r\\n        address creator;\\r\\n        uint256 projectId;\\r\\n        string description;\\r\\n        string title;\\r\\n        uint256 timePeriod;\\r\\n        uint256 deadline;\\r\\n        uint256 budget;\\r\\n        bool posted;\\r\\n        ProjectClassfication projectType;\\r\\n        address auditor; // Independent auditor to verify milestones\\r\\n        bool hasAuditor;\\r\\n    }\\r\\n\\r\\n    struct Bid {\\r\\n        uint256 bidId;\\r\\n        uint256 projectId;\\r\\n        address bidder;\\r\\n        uint amount;\\r\\n        string proposalIPFHash;\\r\\n        bool accepted;\\r\\n    }\\r\\n\\r\\n    struct Bidder {\\r\\n        uint bidderId;\\r\\n        address bidderAddress;\\r\\n        uint256 totalBids;\\r\\n        uint256 reputationScore;\\r\\n        bool blacklisted; // For bidders caught in corrupt activities\\r\\n    }\\r\\n\\r\\n    struct Bond {\\r\\n        address obligor;\\r\\n        uint projectId;\\r\\n        uint amount;\\r\\n        ProjectStatus status;\\r\\n        ProjectCompletion completion;\\r\\n        mapping(address => bool) approvals; // Multi-signature approvals\\r\\n        uint256 requiredApprovals;\\r\\n        uint256 currentApprovals;\\r\\n        mapping(ProjectCompletion => bool) milestoneApproved; // Track which milestones are approved\\r\\n    }\\r\\n\\r\\n    struct Dispute {\\r\\n        uint256 disputeId;\\r\\n        uint256 bondId;\\r\\n        address creator;\\r\\n        address mediator;\\r\\n        string evidence;\\r\\n        bool resolved;\\r\\n        DisputeOutcome outcome;\\r\\n    }\\r\\n\\r\\n    enum ProjectStatus {\\r\\n        Approved,\\r\\n        Completed,\\r\\n        Disputed\\r\\n    }\\r\\n\\r\\n    enum ProjectClassfication {\\r\\n        MaxRate,\\r\\n        FixRate,\\r\\n        MinRate\\r\\n    }\\r\\n\\r\\n    enum ProjectCompletion {\\r\\n        Signed, // 20%\\r\\n        Quarter, // 40%\\r\\n        Half, // 60%\\r\\n        ThreeQuarters, // 80%\\r\\n        Full // 100%\\r\\n    }\\r\\n\\r\\n    enum DisputeOutcome {\\r\\n        Pending,\\r\\n        RuledForCreator,\\r\\n        RuledForObligor,\\r\\n        Compromise\\r\\n    }\\r\\n\\r\\n    uint256 public bidderCount;\\r\\n    mapping(uint256 => Project) public projects;\\r\\n    mapping(uint256 => Bid) public bids;\\r\\n    mapping(uint256 => Bidder) public bidders;\\r\\n    mapping(uint256 => uint256[]) public projectBids;\\r\\n    mapping(address => uint256) public bidderIds;\\r\\n    mapping(uint256 => Dispute) public disputes;\\r\\n\\r\\n    // Mapping for Bond struct with nested mapping\\r\\n    mapping(uint256 => address) private bondObligor;\\r\\n    mapping(uint256 => uint256) private bondProjectId;\\r\\n    mapping(uint256 => uint256) private bondAmount;\\r\\n    mapping(uint256 => ProjectStatus) private bondStatus;\\r\\n    mapping(uint256 => ProjectCompletion) private bondCompletion;\\r\\n    // New mapping to track milestone approvals\\r\\n    mapping(uint256 => mapping(ProjectCompletion => bool)) private bondMilestoneApproved;\\r\\n    mapping(address => mapping(uint256 => bool)) public hasBidded;\\r\\n    // Auditor system\\r\\n    mapping(address => bool) public approvedAuditors;\\r\\n    mapping(uint256 => address[]) public projectAuditors;\\r\\n    // BidEvaluation\\r\\n    mapping(uint256 => bool) public evaluatedbids;\\r\\n    // Bond Winners\\r\\n    mapping(uint256 => uint256) public bondWinners;\\r\\n    // Whistleblower system\\r\\n    mapping(bytes32 => string) private reportDescriptions;\\r\\n    mapping(bytes32 => bool) private whistleblowerReports;\\r\\n    mapping(bytes32 => uint256) private whistleblowerRewards;\\r\\n\\r\\n    // Transparency log\\r\\n    struct LogEntry {\\r\\n        address actor;\\r\\n        string action;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n    mapping(uint256 => LogEntry[]) public transparencyLogs;\\r\\n\\r\\n    // Create a log entry for important actions\\r\\n    function _createLog(uint256 _projectId, string memory _action) private {\\r\\n        transparencyLogs[_projectId].push(LogEntry({ actor: msg.sender, action: _action, timestamp: block.timestamp }));\\r\\n        emit TransparencyLog(_projectId, _action, msg.sender);\\r\\n    }\\r\\n    // Add this state variable to the contract\\r\\n    address[] public approvedAuditorsList;\\r\\n    // Register as an approved auditor\\r\\n    function registerAuditor(address _auditor) public onlyOwner {\\r\\n        require(!approvedAuditors[_auditor], \\\"Auditor already registered\\\");\\r\\n        approvedAuditors[_auditor] = true;\\r\\n        approvedAuditorsList.push(_auditor);\\r\\n    }\\r\\n\\r\\n    function removeAuditor(address _auditor) public onlyOwner {\\r\\n        require(approvedAuditors[_auditor], \\\"Auditor not registered\\\");\\r\\n        approvedAuditors[_auditor] = false;\\r\\n\\r\\n        // Remove from the array\\r\\n        for (uint i = 0; i < approvedAuditorsList.length; i++) {\\r\\n            if (approvedAuditorsList[i] == _auditor) {\\r\\n                // Replace with the last element and pop\\r\\n                approvedAuditorsList[i] = approvedAuditorsList[approvedAuditorsList.length - 1];\\r\\n                approvedAuditorsList.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createBidder() public {\\r\\n        require(bidderIds[msg.sender] == 0, \\\"Bidder already exists\\\");\\r\\n        require(!bidders[bidderIds[msg.sender]].blacklisted, \\\"Address is blacklisted\\\");\\r\\n        bidderCount++;\\r\\n        bidderIds[msg.sender] = bidderCount;\\r\\n        bidders[bidderCount] = Bidder({\\r\\n            bidderId: bidderCount,\\r\\n            bidderAddress: msg.sender,\\r\\n            totalBids: 0,\\r\\n            reputationScore: 0,\\r\\n            blacklisted: false\\r\\n        });\\r\\n        emit BidderCreated(msg.sender, bidderCount);\\r\\n    }\\r\\n\\r\\n    function createProject(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint256 _timeperiod,\\r\\n        uint _budget,\\r\\n        ProjectClassfication _jobType\\r\\n    ) public {\\r\\n        require(bytes(_description).length > 0, \\\"Description cannot be empty\\\");\\r\\n        require(bytes(_title).length > 0, \\\"Description cannot be empty\\\");\\r\\n        require(_timeperiod > 0, \\\"Time period must be positive\\\");\\r\\n        require(_budget > 0, \\\"Budget must be positive\\\");\\r\\n\\r\\n        projectId++;\\r\\n        projects[projectId] = Project({\\r\\n            creator: msg.sender,\\r\\n            projectId: projectId,\\r\\n            description: _description,\\r\\n            budget: _budget,\\r\\n            title: _title,\\r\\n            timePeriod: _timeperiod,\\r\\n            deadline: block.timestamp + _timeperiod,\\r\\n            posted: true,\\r\\n            projectType: _jobType,\\r\\n            auditor: address(0),\\r\\n            hasAuditor: false\\r\\n        });\\r\\n\\r\\n        emit ProjectCreated(projectId, msg.sender, _budget, _jobType);\\r\\n\\r\\n        _createLog(projectId, \\\"PROJECT_CREATED\\\");\\r\\n    }\\r\\n\\r\\n    // Assign an auditor to an existing project\\r\\n    function assignAuditor(uint256 _projectId) public {\\r\\n        Project storage project = projects[_projectId];\\r\\n        require(msg.sender == project.creator, \\\"Only creator can assign auditor\\\");\\r\\n        require(approvedAuditorsList.length > 0, \\\"No approved auditors available\\\");\\r\\n        require(!project.hasAuditor, \\\"Auditor already assigned\\\");\\r\\n\\r\\n        // Generate a pseudorandom number for auditor selection\\r\\n        uint256 randomIndex = uint256(\\r\\n            keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender, _projectId))\\r\\n        ) % approvedAuditorsList.length;\\r\\n\\r\\n        // Assign the randomly selected auditor\\r\\n        address selectedAuditor = approvedAuditorsList[randomIndex];\\r\\n        project.auditor = selectedAuditor;\\r\\n        project.hasAuditor = true;\\r\\n\\r\\n        emit AuditorAssigned(_projectId, selectedAuditor);\\r\\n        _createLog(_projectId, \\\"AUDITOR_ASSIGNED\\\");\\r\\n    }\\r\\n\\r\\n    // Whistleblower function to report corruption\\r\\n    function reportCorruption(uint256 _projectId, string memory _evidence) public {\\r\\n        bytes32 reportHash = keccak256(abi.encodePacked(_projectId, msg.sender, _evidence));\\r\\n        whistleblowerReports[reportHash] = true;\\r\\n        reportDescriptions[reportHash] = _evidence; // Store the evidence\\r\\n        emit WhistleblowerReport(_projectId, reportHash);\\r\\n        _createLog(_projectId, \\\"CORRUPTION_REPORTED\\\");\\r\\n    }\\r\\n    // //function to view the report description\\r\\n    // function getWhistleblowerReport(uint256 _projectId, string memory _evidence) public view returns (string memory) {\\r\\n    //     bytes32 reportHash = keccak256(abi.encodePacked(_projectId, msg.sender, _evidence));\\r\\n    //     require(whistleblowerReports[reportHash], \\\"Report does not exist\\\");\\r\\n    //     return reportDescriptions[reportHash];\\r\\n    // }\\r\\n    // Allow contract owner to blacklist a bidder\\r\\n    function blacklistBidder(uint256 _bidderId) public onlyOwner {\\r\\n        bidders[_bidderId].blacklisted = true;\\r\\n        _createLog(0, \\\"BIDDER_BLACKLISTED\\\");\\r\\n    }\\r\\n\\r\\n    // Function to verify if a project is past deadline\\r\\n    function isProjectLate(uint256 _projectId) public view returns (bool) {\\r\\n        return block.timestamp > projects[_projectId].deadline;\\r\\n    }\\r\\n\\r\\n    // Rest of existing functions with security and anti-corruption enhancements\\r\\n\\r\\n    function createBid(uint256 _projectId, string memory _proposalIPFHash, uint256 _amount) public {\\r\\n        Project storage pj = projects[_projectId];\\r\\n        Bidder storage bidder = bidders[bidderIds[msg.sender]];\\r\\n\\r\\n        // Add check for existing bid from this address\\r\\n        require(!hasBidded[msg.sender][_projectId], \\\"You have already submitted a bid for this project\\\");\\r\\n\\r\\n        require(!bidder.blacklisted, \\\"Bidder is blacklisted\\\");\\r\\n        require(pj.creator != msg.sender, \\\"Creator cannot participate in bidding process\\\");\\r\\n        require(bidderIds[msg.sender] != 0, \\\"Bidder does not exist\\\");\\r\\n        require(pj.posted == true, \\\"Project does not exist or is not posted\\\");\\r\\n        require(projects[_projectId].creator != address(0), \\\"Project does not exist\\\");\\r\\n        require(!isProjectLate(_projectId), \\\"Project bidding deadline has passed\\\");\\r\\n\\r\\n        bidCount++;\\r\\n        if (pj.projectType == ProjectClassfication.FixRate) {\\r\\n            require(_amount == pj.budget, \\\"Invalid amount entered, In Fix Rate Amount Must be Fix\\\");\\r\\n        }\\r\\n\\r\\n        bids[bidCount] = Bid({\\r\\n            bidId: bidCount,\\r\\n            projectId: _projectId,\\r\\n            bidder: msg.sender,\\r\\n            amount: _amount,\\r\\n            proposalIPFHash: _proposalIPFHash,\\r\\n            accepted: false\\r\\n        });\\r\\n\\r\\n        // Mark that this address has bidded for this project\\r\\n        hasBidded[msg.sender][_projectId] = true;\\r\\n\\r\\n        projectBids[_projectId].push(bidCount);\\r\\n        bidder.totalBids++;\\r\\n\\r\\n        emit BidSubmitted(bidCount, _projectId, msg.sender, _amount);\\r\\n        _createLog(_projectId, \\\"BID_SUBMITTED\\\");\\r\\n    }\\r\\n\\r\\n    // Existing bidEvaluation function remains mostly unchanged\\r\\n    function bidEvaluation(uint256 _projectId) public {\\r\\n        Project storage pj = projects[_projectId];\\r\\n        require(pj.posted == true, \\\"Project does not exist or is not posted\\\");\\r\\n        require(projects[_projectId].creator != address(0), \\\"Project does not exist\\\");\\r\\n        require(evaluatedbids[_projectId] != true, \\\"Bid Already Evaluated\\\");\\r\\n        uint256[] memory bidIds = projectBids[_projectId];\\r\\n        require(bidIds.length > 0, \\\"No bids available for this project\\\");\\r\\n        uint256 winnerBidId = 0;\\r\\n\\r\\n        if (pj.projectType == ProjectClassfication.FixRate) {\\r\\n            uint256 random = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)));\\r\\n            evaluatedbids[_projectId] = true;\\r\\n            winnerBidId = bidIds[random % bidIds.length];\\r\\n            bondWinners[_projectId] = winnerBidId;\\r\\n            return;\\r\\n        } else if (pj.projectType == ProjectClassfication.MinRate) {\\r\\n            uint256 minBidAmount = type(uint256).max;\\r\\n            uint256[] memory tiedBids = new uint256[](bidIds.length);\\r\\n            uint256 tiedCount = 0;\\r\\n\\r\\n            for (uint256 i = 0; i < bidIds.length; i++) {\\r\\n                uint256 currentBidId = bidIds[i];\\r\\n                uint256 currentBidAmount = bids[currentBidId].amount;\\r\\n\\r\\n                if (currentBidAmount < minBidAmount) {\\r\\n                    minBidAmount = currentBidAmount;\\r\\n                    tiedCount = 1;\\r\\n                    tiedBids[0] = currentBidId;\\r\\n                } else if (currentBidAmount == minBidAmount) {\\r\\n                    tiedBids[tiedCount] = currentBidId;\\r\\n                    tiedCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) %\\r\\n                tiedCount;\\r\\n            evaluatedbids[_projectId] = true;\\r\\n            winnerBidId = tiedBids[randomIndex];\\r\\n            bondWinners[_projectId] = winnerBidId;\\r\\n            return;\\r\\n        } else if (pj.projectType == ProjectClassfication.MaxRate) {\\r\\n            uint256 maxBidAmount = 0;\\r\\n            uint256[] memory tiedBids = new uint256[](bidIds.length);\\r\\n            uint256 tiedCount = 0;\\r\\n\\r\\n            for (uint256 i = 0; i < bidIds.length; i++) {\\r\\n                uint256 currentBidId = bidIds[i];\\r\\n                uint256 currentBidAmount = bids[currentBidId].amount;\\r\\n\\r\\n                if (currentBidAmount > maxBidAmount) {\\r\\n                    maxBidAmount = currentBidAmount;\\r\\n                    tiedCount = 1;\\r\\n                    tiedBids[0] = currentBidId;\\r\\n                } else if (currentBidAmount == maxBidAmount) {\\r\\n                    tiedBids[tiedCount] = currentBidId;\\r\\n                    tiedCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) %\\r\\n                tiedCount;\\r\\n            evaluatedbids[_projectId] = true;\\r\\n            winnerBidId = tiedBids[randomIndex];\\r\\n            bondWinners[_projectId] = winnerBidId;\\r\\n            return;\\r\\n        } else {\\r\\n            revert(\\\"Unsupported project type\\\");\\r\\n        }\\r\\n    }\\r\\n    function awardBond(uint256 _projectId, uint256 bidWinner) public payable nonReentrant returns (uint256 _bidWiner) {\\r\\n        bondCount++;\\r\\n        Bid storage bd = bids[bidWinner];\\r\\n        Project storage pj = projects[_projectId];\\r\\n\\r\\n        require(pj.posted == true, \\\"Project Not Posted\\\");\\r\\n        require(msg.sender == pj.creator, \\\"Only project creator can award bond\\\");\\r\\n        require(msg.value == bd.amount, \\\"Must send full bid amount\\\");\\r\\n        require(!bidders[bidderIds[bd.bidder]].blacklisted, \\\"Selected bidder is blacklisted\\\");\\r\\n\\r\\n        // Bond storage with mappings\\r\\n        bondObligor[bondCount] = bd.bidder;\\r\\n        bondProjectId[bondCount] = _projectId;\\r\\n        bondStatus[bondCount] = ProjectStatus.Approved;\\r\\n        bondCompletion[bondCount] = ProjectCompletion.Signed;\\r\\n        bondAmount[bondCount] = bd.amount;\\r\\n\\r\\n        // Calculate and transfer initial 20% payment\\r\\n        uint256 initialPayment = (bd.amount * 20) / 100;\\r\\n        payable(bd.bidder).transfer(initialPayment);\\r\\n\\r\\n        // Mark bid as accepted\\r\\n        bd.accepted = true;\\r\\n\\r\\n        emit BondAwarded(_projectId, bd.bidder, bd.amount, initialPayment);\\r\\n        _createLog(_projectId, \\\"BOND_AWARDED\\\");\\r\\n\\r\\n        pj.posted = false;\\r\\n        return bidWinner;\\r\\n    }\\r\\n\\r\\n    // Auditor approval for milestone\\r\\n    function approveCompletion(uint256 _bondId, ProjectCompletion _milestone) public {\\r\\n        require(bondObligor[_bondId] != address(0), \\\"Bond does not exist\\\");\\r\\n        require(bondStatus[_bondId] == ProjectStatus.Approved, \\\"Project not in approved state\\\");\\r\\n\\r\\n        Project storage project = projects[bondProjectId[_bondId]];\\r\\n        require(msg.sender == project.auditor, \\\"Only assigned auditor can approve\\\");\\r\\n        require(_milestone > bondCompletion[_bondId], \\\"Invalid milestone\\\");\\r\\n\\r\\n        // Mark this milestone as approved\\r\\n        bondMilestoneApproved[_bondId][_milestone] = true;\\r\\n\\r\\n        emit AuditorApproval(_bondId, _milestone);\\r\\n        _createLog(bondProjectId[_bondId], \\\"MILESTONE_APPROVED\\\");\\r\\n        // return true;\\r\\n    }\\r\\n\\r\\n    // Modified payment release with auditor verification requirement\\r\\n    function releasePayment(uint256 _bondId, ProjectCompletion _newCompletion) public nonReentrant {\\r\\n        require(bondObligor[_bondId] != address(0), \\\"Bond does not exist\\\");\\r\\n        require(bondStatus[_bondId] != ProjectStatus.Completed, \\\"Project already completed\\\");\\r\\n        require(bondStatus[_bondId] != ProjectStatus.Disputed, \\\"Project is disputed\\\");\\r\\n\\r\\n        Project storage project = projects[bondProjectId[_bondId]];\\r\\n\\r\\n        // Verify permissions and completion status\\r\\n        require(msg.sender == project.creator, \\\"Only project creator can release payment\\\");\\r\\n        require(_newCompletion > bondCompletion[_bondId], \\\"Invalid completion status\\\");\\r\\n\\r\\n        // If there's an auditor, they must have approved this milestone\\r\\n        if (project.hasAuditor) {\\r\\n            require(bondMilestoneApproved[_bondId][_newCompletion], \\\"Milestone not approved by auditor yet\\\");\\r\\n        }\\r\\n\\r\\n        // Calculate payment due based on milestone difference\\r\\n        uint256 previousPercentage = getCompletionPercentage(bondCompletion[_bondId]);\\r\\n        uint256 newPercentage = getCompletionPercentage(_newCompletion);\\r\\n        uint256 paymentDue = (bondAmount[_bondId] * (newPercentage - previousPercentage)) / 100;\\r\\n\\r\\n        // Update completion status first\\r\\n        bondCompletion[_bondId] = _newCompletion;\\r\\n\\r\\n        // Update bond status if project is completed\\r\\n        if (_newCompletion == ProjectCompletion.Full) {\\r\\n            bondStatus[_bondId] = ProjectStatus.Completed;\\r\\n            // Update reputation score for successful completion\\r\\n            uint256 bidderId = bidderIds[bondObligor[_bondId]];\\r\\n            bidders[bidderId].reputationScore += 1;\\r\\n        }\\r\\n\\r\\n        // Transfer milestone payment\\r\\n        payable(bondObligor[_bondId]).transfer(paymentDue);\\r\\n\\r\\n        emit PaymentReleased(_bondId, paymentDue, _newCompletion);\\r\\n        _createLog(bondProjectId[_bondId], \\\"PAYMENT_RELEASED\\\");\\r\\n    }\\r\\n\\r\\n    // Enhanced dispute resolution\\r\\n    function createDispute(uint256 _bondId, string memory _evidence) public {\\r\\n        require(bondObligor[_bondId] != address(0), \\\"Bond does not exist\\\");\\r\\n        require(bondStatus[_bondId] == ProjectStatus.Approved, \\\"Invalid bond status\\\");\\r\\n\\r\\n        Project storage project = projects[bondProjectId[_bondId]];\\r\\n        require(\\r\\n            msg.sender == project.creator || msg.sender == bondObligor[_bondId],\\r\\n            \\\"Only project creator or obligor can create dispute\\\"\\r\\n        );\\r\\n\\r\\n        disputeCount++;\\r\\n        disputes[disputeCount] = Dispute({\\r\\n            disputeId: disputeCount,\\r\\n            bondId: _bondId,\\r\\n            creator: msg.sender,\\r\\n            mediator: address(0),\\r\\n            evidence: _evidence,\\r\\n            resolved: false,\\r\\n            outcome: DisputeOutcome.Pending\\r\\n        });\\r\\n\\r\\n        bondStatus[_bondId] = ProjectStatus.Disputed;\\r\\n\\r\\n        _createLog(bondProjectId[_bondId], \\\"DISPUTE_CREATED\\\");\\r\\n    }\\r\\n\\r\\n    // Assign mediator to a dispute\\r\\n    function assignMediator(uint256 _disputeId, address _mediator) public onlyOwner {\\r\\n        Dispute storage dispute = disputes[_disputeId];\\r\\n        require(!dispute.resolved, \\\"Dispute already resolved\\\");\\r\\n        require(dispute.mediator == address(0), \\\"Mediator already assigned\\\");\\r\\n\\r\\n        dispute.mediator = _mediator;\\r\\n        emit MediatorAssigned(_disputeId, _mediator);\\r\\n        _createLog(bondProjectId[dispute.bondId], \\\"MEDIATOR_ASSIGNED\\\");\\r\\n    }\\r\\n\\r\\n    // Resolve dispute\\r\\n    function resolveDispute(uint256 _disputeId, DisputeOutcome _outcome) public {\\r\\n        Dispute storage dispute = disputes[_disputeId];\\r\\n        require(msg.sender == dispute.mediator, \\\"Only assigned mediator can resolve\\\");\\r\\n        require(!dispute.resolved, \\\"Dispute already resolved\\\");\\r\\n\\r\\n        dispute.resolved = true;\\r\\n        dispute.outcome = _outcome;\\r\\n\\r\\n        // Handle dispute resolution effects\\r\\n        if (_outcome == DisputeOutcome.RuledForCreator) {\\r\\n            // Penalize the obligor\\r\\n            uint256 bidderId = bidderIds[bondObligor[dispute.bondId]];\\r\\n            if (bidders[bidderId].reputationScore > 0) {\\r\\n                bidders[bidderId].reputationScore -= 1;\\r\\n            }\\r\\n        } else if (_outcome == DisputeOutcome.RuledForObligor) {\\r\\n            // Allow obligor to continue work\\r\\n            bondStatus[dispute.bondId] = ProjectStatus.Approved;\\r\\n        }\\r\\n\\r\\n        emit DisputeResolved(_disputeId, _outcome);\\r\\n        _createLog(bondProjectId[dispute.bondId], \\\"DISPUTE_RESOLVED\\\");\\r\\n    }\\r\\n    function getAllProjects() public view returns (Project[] memory) {\\r\\n        Project[] memory allProjects = new Project[](projectId);\\r\\n        for (uint256 i = 0; i < projectId; i++) {\\r\\n            allProjects[i] = projects[i + 1]; // projectId starts from 1\\r\\n        }\\r\\n        return allProjects;\\r\\n    }\\r\\n    function getProjectById(\\r\\n        uint256 _projectId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory title,\\r\\n            uint256 budget,\\r\\n            string memory description,\\r\\n            uint256 deadline,\\r\\n            bool posted,\\r\\n            uint256 Id,\\r\\n            ProjectClassfication projectType,\\r\\n            address creator,\\r\\n            uint256 timePeriod\\r\\n        )\\r\\n    {\\r\\n        require(_projectId <= projectId, \\\"Project does not exist\\\");\\r\\n        Project memory project = projects[_projectId];\\r\\n\\r\\n        return (\\r\\n            project.title,\\r\\n            project.budget,\\r\\n            project.description,\\r\\n            project.deadline,\\r\\n            project.posted,\\r\\n            project.projectId,\\r\\n            project.projectType,\\r\\n            project.creator,\\r\\n            project.timePeriod\\r\\n        );\\r\\n    }\\r\\n    function getAllActiveProjects() public view returns (Project[] memory) {\\r\\n        uint256 count = 0;\\r\\n        // Count active projects\\r\\n        for (uint256 i = 1; i <= projectId; i++) {\\r\\n            if (projects[i].posted) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        Project[] memory activeProjects = new Project[](count);\\r\\n        uint256 j = 0;\\r\\n        // Collect active projects\\r\\n        for (uint256 i = 1; i <= projectId; i++) {\\r\\n            if (projects[i].posted) {\\r\\n                activeProjects[j] = projects[i];\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n        return activeProjects;\\r\\n    }\\r\\n    function getBidsByUser(address _bidder) public view returns (Bid[] memory) {\\r\\n        // First, count the number of bids by this user\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 1; i <= bidCount; i++) {\\r\\n            if (bids[i].bidder == _bidder) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create array of correct size\\r\\n        Bid[] memory userBids = new Bid[](count);\\r\\n        uint256 currentIndex = 0;\\r\\n\\r\\n        // Collect all bids by the user\\r\\n        for (uint256 i = 1; i <= bidCount; i++) {\\r\\n            if (bids[i].bidder == _bidder) {\\r\\n                userBids[currentIndex] = bids[i];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return userBids;\\r\\n    }\\r\\n    function getProjectsByCreator(address _creator) public view returns (Project[] memory) {\\r\\n        // First, count the number of projects by this creator\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 1; i <= projectId; i++) {\\r\\n            if (projects[i].creator == _creator) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create array of correct size and populate it\\r\\n        Project[] memory creatorProjects = new Project[](count);\\r\\n        uint256 currentIndex = 0;\\r\\n\\r\\n        // Collect all projects by creator\\r\\n        for (uint256 i = 1; i <= projectId; i++) {\\r\\n            if (projects[i].creator == _creator) {\\r\\n                creatorProjects[currentIndex] = projects[i];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return creatorProjects;\\r\\n    }\\r\\n    // Get Project Bid Winner\\r\\n    function getProjectBidWinner(uint256 _projectId) public view returns (uint256 _bidWinnerId) {\\r\\n        // Project storage pj = projects[_projectId];\\r\\n        require(evaluatedbids[_projectId] == true, \\\"Bid Not Evaluated\\\");\\r\\n        // require(msg.sender == pj.creator, \\\"You are Not Authothorized\\\");\\r\\n        require(_projectId <= projectId, \\\"Invalid ProjectId\\\");\\r\\n        return bondWinners[_projectId];\\r\\n    }\\r\\n    // Get transparency logs for a project\\r\\n    function getProjectLogs(uint256 _projectId) public view returns (LogEntry[] memory) {\\r\\n        return transparencyLogs[_projectId];\\r\\n    }\\r\\n\\r\\n    function getCompletionPercentage(ProjectCompletion _completion) public pure returns (uint256) {\\r\\n        // Return percentages based on completion stage\\r\\n        if (_completion == ProjectCompletion.Signed) return 20; // Initial 20%\\r\\n        if (_completion == ProjectCompletion.Quarter) return 40; // +20%\\r\\n        if (_completion == ProjectCompletion.Half) return 60; // +20%\\r\\n        if (_completion == ProjectCompletion.ThreeQuarters) return 80; // +20%\\r\\n        if (_completion == ProjectCompletion.Full) return 100; // Final 20%\\r\\n        return 0;\\r\\n    }\\r\\n    // Function to get the current completion level of a bond\\r\\n    function getCompletionLevel(uint256 _bondId) public view returns (ProjectCompletion) {\\r\\n        require(bondObligor[_bondId] != address(0), \\\"Bond does not exist\\\");\\r\\n        return bondCompletion[_bondId];\\r\\n    }\\r\\n\\r\\n    // Removed simple dispute function which is now replaced by more comprehensive dispute resolution system\\r\\n\\r\\n    // Using OpenZeppelin's ReentrancyGuard instead of custom nonReentrant modifier\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x8f2d3a6f0e885875e0050f460e5b5ac1486b762a49c4f0cbac1db5aa24d1ee2f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600460025560006003556000600455600060055560006006553480156200002a57600080fd5b5033806200005257604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200005d8162000068565b5060018055620000b8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6151ae80620000c86000396000f3fe60806040526004361061028c5760003560e01c80638edd4d241161015a578063c15dc663116100c1578063df9a4f561161007a578063df9a4f56146108ed578063e55e42111461090d578063e6116cfd1461092d578063ef3a685c1461094d578063f2ef441b1461096d578063f2fde38b1461098257600080fd5b8063c15dc663146107a8578063cdab9532146107d5578063cdd4c857146107f5578063cff29dfd14610815578063d198fe551461089e578063d816dbbe146108be57600080fd5b8063b032518411610113578063b0325184146106d0578063b40a5627146106fd578063b75953cd14610713578063b938253114610740578063bee5cdca14610760578063c0574ff21461079557600080fd5b80638edd4d2414610624578063936cf6dd1461063a5780639c32c4471461065a578063a28889e11461067a578063a6b0293914610690578063a84cfba6146106b057600080fd5b806355833701116101fe578063774b9213116101b7578063774b92131461052457806380d038291461055c57806382c103461461057e57806382d9eb31146105ab5780638d2d0d5c146105cb5780638da5cb5b1461060657600080fd5b80635583370114610444578063564a565d1461046457806360fe2a75146104975780636b57f262146104c957806370d29c11146104f9578063715018a61461050f57600080fd5b80633fafa127116102505780633fafa1271461037957806341ad56921461038f5780634423c5f1146103bc5780634862ce47146103ee57806349fcd2f61461040e57806354fd4d501461042e57600080fd5b8063105ad5ac14610298578063107046bd146102cb578063147df50d146103025780631a46ceee1461034257806333209e651461035957600080fd5b3661029357005b600080fd5b3480156102a457600080fd5b506102b86102b3366004614645565b6109a2565b6040519081526020015b60405180910390f35b3480156102d757600080fd5b506102eb6102e6366004614645565b610a57565b6040516102c29b9a999897969594939291906146d8565b34801561030e57600080fd5b5061033261031d366004614645565b60176020526000908152604090205460ff1681565b60405190151581526020016102c2565b34801561034e57600080fd5b50610357610bd9565b005b34801561036557600080fd5b50610357610374366004614808565b610d75565b34801561038557600080fd5b506102b860035481565b34801561039b57600080fd5b506102b86103aa366004614874565b600c6020526000908152604090205481565b3480156103c857600080fd5b506103dc6103d7366004614645565b61121b565b6040516102c296959493929190614896565b3480156103fa57600080fd5b506102b86104093660046148de565b6112e7565b34801561041a57600080fd5b506102b861042936600461490f565b611318565b34801561043a57600080fd5b506102b860025481565b34801561045057600080fd5b5061035761045f366004614645565b6113c6565b34801561047057600080fd5b5061048461047f366004614645565b611423565b6040516102c2979695949392919061493a565b3480156104a357600080fd5b506103326104b2366004614645565b600090815260086020526040902060050154421190565b3480156104d557600080fd5b506103326104e4366004614874565b60156020526000908152604090205460ff1681565b34801561050557600080fd5b506102b860075481565b34801561051b57600080fd5b506103576114fb565b34801561053057600080fd5b5061054461053f3660046148de565b61150f565b6040516001600160a01b0390911681526020016102c2565b34801561056857600080fd5b50610571611547565b6040516102c29190614996565b34801561058a57600080fd5b5061059e610599366004614874565b6117df565b6040516102c29190614a9d565b3480156105b757600080fd5b506103576105c6366004614645565b611a37565b3480156105d757600080fd5b506103326105e6366004614b3e565b601460209081526000928352604080842090915290825290205460ff1681565b34801561061257600080fd5b506000546001600160a01b0316610544565b34801561063057600080fd5b506102b860055481565b34801561064657600080fd5b50610544610655366004614645565b611feb565b34801561066657600080fd5b50610357610675366004614b68565b612015565b34801561068657600080fd5b506102b860065481565b34801561069c57600080fd5b506103576106ab366004614baf565b6122b1565b3480156106bc57600080fd5b506105716106cb366004614874565b612601565b3480156106dc57600080fd5b506106f06106eb366004614645565b612904565b6040516102c29190614c4f565b34801561070957600080fd5b506102b860045481565b34801561071f57600080fd5b506102b861072e366004614645565b60186020526000908152604090205481565b34801561074c57600080fd5b5061035761075b366004614c5d565b61294e565b34801561076c57600080fd5b5061078061077b366004614645565b612dfd565b6040516102c299989796959493929190614c89565b6102b86107a33660046148de565b613084565b3480156107b457600080fd5b506107c86107c3366004614645565b6133c7565b6040516102c29190614cfc565b3480156107e157600080fd5b506103576107f0366004614b68565b6134eb565b34801561080157600080fd5b50610357610810366004614d7a565b6135b5565b34801561082157600080fd5b5061086c610830366004614645565b600a602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b039092169290919060ff1685565b604080519586526001600160a01b0390941660208601529284019190915260608301521515608082015260a0016102c2565b3480156108aa57600080fd5b506103576108b9366004614c5d565b613715565b3480156108ca57600080fd5b506108de6108d93660046148de565b61398e565b6040516102c293929190614d9d565b3480156108f957600080fd5b50610357610908366004614874565b613a64565b34801561091957600080fd5b50610357610928366004614dd1565b613b3b565b34801561093957600080fd5b50610357610948366004614874565b613d6f565b34801561095957600080fd5b50610357610968366004614645565b613efd565b34801561097957600080fd5b50610571614135565b34801561098e57600080fd5b5061035761099d366004614874565b614433565b60008181526017602052604081205460ff1615156001146109fe5760405162461bcd60e51b8152602060048201526011602482015270109a5908139bdd08115d985b1d585d1959607a1b60448201526064015b60405180910390fd5b600354821115610a445760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9bda9958dd1259607a1b60448201526064016109f5565b5060009081526018602052604090205490565b6008602052600090815260409020805460018201546002830180546001600160a01b03909316939192610a8990614e05565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab590614e05565b8015610b025780601f10610ad757610100808354040283529160200191610b02565b820191906000526020600020905b815481529060010190602001808311610ae557829003601f168201915b505050505090806003018054610b1790614e05565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4390614e05565b8015610b905780601f10610b6557610100808354040283529160200191610b90565b820191906000526020600020905b815481529060010190602001808311610b7357829003601f168201915b505050506004830154600584015460068501546007909501549394919390925060ff8082169161010081048216916201000082046001600160a01b031691600160b01b9004168b565b336000908152600c602052604090205415610c2e5760405162461bcd60e51b815260206004820152601560248201527442696464657220616c72656164792065786973747360581b60448201526064016109f5565b336000908152600c60209081526040808320548352600a90915290206004015460ff1615610c975760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc81a5cc8189b1858dadb1a5cdd195960521b60448201526064016109f5565b60078054906000610ca783614e4f565b909155505060078054336000818152600c60209081526040808320859055805160a0810182528581528083018581528183018581526060830186815260808401878152988752600a8652958490209251835590516001830180546001600160a01b0319166001600160a01b039092169190911790555160028201559251600384015593516004909201805460ff19169215159290921790915592549151918252917ffe92b55fae486bedee58bf3b8551b5cd34508dd518b841a10424e3a6491a0ccc910160405180910390a2565b600083815260086020908152604080832033808552600c8452828520548552600a84528285209085526014845282852088865290935292205460ff1615610e185760405162461bcd60e51b815260206004820152603160248201527f596f75206861766520616c7265616479207375626d697474656420612062696460448201527008199bdc881d1a1a5cc81c1c9bda9958dd607a1b60648201526084016109f5565b600481015460ff1615610e655760405162461bcd60e51b8152602060048201526015602482015274109a5919195c881a5cc8189b1858dadb1a5cdd1959605a1b60448201526064016109f5565b8154336001600160a01b0390911603610ed65760405162461bcd60e51b815260206004820152602d60248201527f43726561746f722063616e6e6f7420706172746963697061746520696e20626960448201526c6464696e672070726f6365737360981b60648201526084016109f5565b336000908152600c60205260408120549003610f2c5760405162461bcd60e51b8152602060048201526015602482015274109a5919195c88191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016109f5565b600782015460ff161515600114610f555760405162461bcd60e51b81526004016109f590614e68565b6000858152600860205260409020546001600160a01b0316610f895760405162461bcd60e51b81526004016109f590614eaf565b600085815260086020526040902060050154421115610ff65760405162461bcd60e51b815260206004820152602360248201527f50726f6a6563742062696464696e6720646561646c696e6520686173207061736044820152621cd95960ea1b60648201526084016109f5565b6004805490600061100683614e4f565b90915550600190506007830154610100900460ff16600281111561102c5761102c6146ae565b036110a357816006015483146110a35760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420616d6f756e7420656e74657265642c20496e2046697820526044820152750c2e8ca4082dadeeadce8409aeae6e840c4ca408cd2f60531b60648201526084016109f5565b6040805160c0810182526004805480835260208084018a815233858701908152606086018a8152608087018c8152600060a08901819052958652600990945296909320855181559051600182015591516002830180546001600160a01b0319166001600160a01b039092169190911790559351600382015592519192919082019061112e9082614f2d565b5060a091909101516005909101805491151560ff19928316179055336000908152601460209081526040808320898452825280832080549094166001908117909455600b8252822060045481549485018255908352908220909201919091556002820180549161119d83614e4f565b9091555050600454604080518781523360208201529081018590527fb5cc2e6a75ba593196ae1600d90399014d2790179ceae0b5d9a2303144028bad9060600160405180910390a2611214856040518060400160405280600d81526020016c10925117d4d550935255151151609a1b81525061446e565b5050505050565b60096020526000908152604090208054600182015460028301546003840154600485018054949593946001600160a01b0390931693919261125b90614e05565b80601f016020809104026020016040519081016040528092919081815260200182805461128790614e05565b80156112d45780601f106112a9576101008083540402835291602001916112d4565b820191906000526020600020905b8154815290600101906020018083116112b757829003601f168201915b5050506005909301549192505060ff1686565b600b602052816000526040600020818154811061130357600080fd5b90600052602060002001600091509150505481565b60008082600481111561132d5761132d6146ae565b0361133a57506014919050565b600182600481111561134e5761134e6146ae565b0361135b57506028919050565b600282600481111561136f5761136f6146ae565b0361137c5750603c919050565b6003826004811115611390576113906146ae565b0361139d57506050919050565b60048260048111156113b1576113b16146ae565b036113be57506064919050565b506000919050565b6113ce614528565b6000818152600a60209081526040808320600401805460ff191660011790558051808201909152601281527110925111115497d0931050d2d31254d5115160721b91810191909152611420919061446e565b50565b600d6020526000908152604090208054600182015460028301546003840154600485018054949593946001600160a01b0393841694929093169261146690614e05565b80601f016020809104026020016040519081016040528092919081815260200182805461149290614e05565b80156114df5780601f106114b4576101008083540402835291602001916114df565b820191906000526020600020905b8154815290600101906020018083116114c257829003601f168201915b5050506005909301549192505060ff8082169161010090041687565b611503614528565b61150d6000614555565b565b6016602052816000526040600020818154811061152b57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6060600060035467ffffffffffffffff81111561156657611566614765565b60405190808252806020026020018201604052801561159f57816020015b61158c6145cf565b8152602001906001900390816115845790505b50905060005b6003548110156117d957600860006115be836001614fed565b8152602080820192909252604090810160002081516101608101835281546001600160a01b03168152600182015493810193909352600281018054919284019161160790614e05565b80601f016020809104026020016040519081016040528092919081815260200182805461163390614e05565b80156116805780601f1061165557610100808354040283529160200191611680565b820191906000526020600020905b81548152906001019060200180831161166357829003601f168201915b5050505050815260200160038201805461169990614e05565b80601f01602080910402602001604051908101604052809291908181526020018280546116c590614e05565b80156117125780601f106116e757610100808354040283529160200191611712565b820191906000526020600020905b8154815290600101906020018083116116f557829003601f168201915b5050509183525050600482015460208201526005820154604082015260068201546060820152600782015460ff8082161515608084015260a090920191610100909104166002811115611767576117676146ae565b6002811115611778576117786146ae565b8152600791909101546201000081046001600160a01b03166020830152600160b01b900460ff16151560409091015282518390839081106117bb576117bb615000565b602002602001018190525080806117d190614e4f565b9150506115a5565b50919050565b6060600060015b6004548111611833576000818152600960205260409020600201546001600160a01b03808616911603611821578161181d81614e4f565b9250505b8061182b81614e4f565b9150506117e6565b5060008167ffffffffffffffff81111561184f5761184f614765565b6040519080825280602002602001820160405280156118c457816020015b6118b16040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001606081526020016000151581525090565b81526020019060019003908161186d5790505b509050600060015b6004548111611a2d576000818152600960205260409020600201546001600160a01b03808816911603611a1b57600081815260096020908152604091829020825160c0810184528154815260018201549281019290925260028101546001600160a01b0316928201929092526003820154606082015260048201805491929160808401919061195a90614e05565b80601f016020809104026020016040519081016040528092919081815260200182805461198690614e05565b80156119d35780601f106119a8576101008083540402835291602001916119d3565b820191906000526020600020905b8154815290600101906020018083116119b657829003601f168201915b50505091835250506005919091015460ff1615156020909101528351849084908110611a0157611a01615000565b60200260200101819052508180611a1790614e4f565b9250505b80611a2581614e4f565b9150506118cc565b5090949350505050565b6000818152600860205260409020600781015460ff161515600114611a6e5760405162461bcd60e51b81526004016109f590614e68565b6000828152600860205260409020546001600160a01b0316611aa25760405162461bcd60e51b81526004016109f590614eaf565b60008281526017602052604090205460ff161515600103611afd5760405162461bcd60e51b8152602060048201526015602482015274109a5908105b1c9958591e48115d985b1d585d1959605a1b60448201526064016109f5565b6000828152600b6020908152604080832080548251818502810185019093528083529192909190830182828015611b5357602002820191906000526020600020905b815481526020019060010190808311611b3f575b505050505090506000815111611bb65760405162461bcd60e51b815260206004820152602260248201527f4e6f206269647320617661696c61626c6520666f7220746869732070726f6a6560448201526118dd60f21b60648201526084016109f5565b600060016007840154610100900460ff166002811115611bd857611bd86146ae565b03611c87576000424433604051602001611c1293929190928352602083019190915260601b6001600160601b031916604082015260540190565b60408051601f198184030181529181528151602092830120600088815260179093529120805460ff1916600117905583519091508390611c52908361502c565b81518110611c6257611c62615000565b6020908102919091018101516000968752601890915260409095209490945550505050565b60026007840154610100900460ff166002811115611ca757611ca76146ae565b03611e6d5781516000199060009067ffffffffffffffff811115611ccd57611ccd614765565b604051908082528060200260200182016040528015611cf6578160200160208202803683370190505b5090506000805b8551811015611dbb576000868281518110611d1a57611d1a615000565b6020026020010151905060006009600083815260200190815260200160002060030154905085811015611d7357809550600193508185600081518110611d6257611d62615000565b602002602001018181525050611da6565b858103611da65781858581518110611d8d57611d8d615000565b602090810291909101015283611da281614e4f565b9450505b50508080611db390614e4f565b915050611cfd565b50600081424433604051602001611df293929190928352602083019190915260601b6001600160601b031916604082015260540190565b6040516020818303038152906040528051906020012060001c611e15919061502c565b6000898152601760205260409020805460ff191660011790558351909150839082908110611e4557611e45615000565b6020908102919091018101516000998a52601890915260409098209790975550505050505050565b60006007840154610100900460ff166002811115611e8d57611e8d6146ae565b03611f9d57600080835167ffffffffffffffff811115611eaf57611eaf614765565b604051908082528060200260200182016040528015611ed8578160200160208202803683370190505b5090506000805b8551811015611dbb576000868281518110611efc57611efc615000565b6020026020010151905060006009600083815260200190815260200160002060030154905085811115611f5557809550600193508185600081518110611f4457611f44615000565b602002602001018181525050611f88565b858103611f885781858581518110611f6f57611f6f615000565b602090810291909101015283611f8481614e4f565b9450505b50508080611f9590614e4f565b915050611edf565b60405162461bcd60e51b815260206004820152601860248201527f556e737570706f727465642070726f6a6563742074797065000000000000000060448201526064016109f5565b50505050565b601d8181548110611ffb57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000828152600e60205260409020546001600160a01b03166120495760405162461bcd60e51b81526004016109f590615040565b60008281526011602052604081205460ff16600281111561206c5761206c6146ae565b146120af5760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420626f6e642073746174757360681b60448201526064016109f5565b6000828152600f602090815260408083205483526008909152902080546001600160a01b03163314806120f857506000838152600e60205260409020546001600160a01b031633145b61215f5760405162461bcd60e51b815260206004820152603260248201527f4f6e6c792070726f6a6563742063726561746f72206f72206f626c69676f722060448201527163616e20637265617465206469737075746560701b60648201526084016109f5565b6006805490600061216f83614e4f565b90915550506040805160e081018252600654808252602080830187815233848601908152600060608601818152608087018a815260a0880183905260c08801839052958252600d90945295909520845181559051600182015593516002850180546001600160a01b03199081166001600160a01b03938416179091559151600386018054909316911617905551909190600482019061220e9082614f2d565b5060a082015160058201805491151560ff1983168117825560c08501519261ff001990911661ffff1990911617610100836003811115612250576122506146ae565b021790555050506000838152601160209081526040808320805460ff19166002179055600f808352928190205481518083019092529281526e111254d415551157d0d49150551151608a1b918101919091526122ac919061446e565b505050565b60008451116123025760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d707479000000000060448201526064016109f5565b60008551116123535760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d707479000000000060448201526064016109f5565b600083116123a35760405162461bcd60e51b815260206004820152601c60248201527f54696d6520706572696f64206d75737420626520706f7369746976650000000060448201526064016109f5565b600082116123f35760405162461bcd60e51b815260206004820152601760248201527f427564676574206d75737420626520706f73697469766500000000000000000060448201526064016109f5565b6003805490600061240383614e4f565b9190505550604051806101600160405280336001600160a01b03168152602001600354815260200185815260200186815260200184815260200184426124499190614fed565b8152602081018490526001604082015260600182600281111561246e5761246e6146ae565b815260006020808301829052604092830182905260035482526008815290829020835181546001600160a01b0319166001600160a01b039091161781559083015160018201559082015160028201906124c79082614f2d565b50606082015160038201906124dc9082614f2d565b506080820151600482015560a0820151600582015560c0820151600682015560e082015160078201805491151560ff19831681178255610100808601519361ff001990921661ffff19909216919091179083600281111561253f5761253f6146ae565b021790555061012082015160079091018054610140909301511515600160b01b0260ff60b01b196001600160a01b0390931662010000029290921662010000600160b81b0319909316929092171790556003546040517f0db710c469c97f053e348f5d284c47de30e140867a591571cde5c008435395a1906125c69033908690869061506d565b60405180910390a26112146003546040518060400160405280600f81526020016e141493d29150d517d0d49150551151608a1b81525061446e565b6060600060015b6003548111612652576000818152600860205260409020546001600160a01b03808616911603612640578161263c81614e4f565b9250505b8061264a81614e4f565b915050612608565b5060008167ffffffffffffffff81111561266e5761266e614765565b6040519080825280602002602001820160405280156126a757816020015b6126946145cf565b81526020019060019003908161268c5790505b509050600060015b6003548111611a2d576000818152600860205260409020546001600160a01b038088169116036128f25760008181526008602090815260409182902082516101608101845281546001600160a01b03168152600182015492810192909252600281018054929391929184019161272490614e05565b80601f016020809104026020016040519081016040528092919081815260200182805461275090614e05565b801561279d5780601f106127725761010080835404028352916020019161279d565b820191906000526020600020905b81548152906001019060200180831161278057829003601f168201915b505050505081526020016003820180546127b690614e05565b80601f01602080910402602001604051908101604052809291908181526020018280546127e290614e05565b801561282f5780601f106128045761010080835404028352916020019161282f565b820191906000526020600020905b81548152906001019060200180831161281257829003601f168201915b5050509183525050600482015460208201526005820154604082015260068201546060820152600782015460ff8082161515608084015260a090920191610100909104166002811115612884576128846146ae565b6002811115612895576128956146ae565b8152600791909101546201000081046001600160a01b03166020830152600160b01b900460ff16151560409091015283518490849081106128d8576128d8615000565b602002602001018190525081806128ee90614e4f565b9250505b806128fc81614e4f565b9150506126af565b6000818152600e60205260408120546001600160a01b03166129385760405162461bcd60e51b81526004016109f590615040565b5060009081526012602052604090205460ff1690565b6129566145a5565b6000828152600e60205260409020546001600160a01b031661298a5760405162461bcd60e51b81526004016109f590615040565b600160008381526011602052604090205460ff1660028111156129af576129af6146ae565b036129fc5760405162461bcd60e51b815260206004820152601960248201527f50726f6a65637420616c726561647920636f6d706c657465640000000000000060448201526064016109f5565b600260008381526011602052604090205460ff166002811115612a2157612a216146ae565b03612a645760405162461bcd60e51b8152602060048201526013602482015272141c9bda9958dd081a5cc8191a5cdc1d5d1959606a1b60448201526064016109f5565b6000828152600f602090815260408083205483526008909152902080546001600160a01b03163314612ae95760405162461bcd60e51b815260206004820152602860248201527f4f6e6c792070726f6a6563742063726561746f722063616e2072656c65617365604482015267081c185e5b595b9d60c21b60648201526084016109f5565b60008381526012602052604090205460ff166004811115612b0c57612b0c6146ae565b826004811115612b1e57612b1e6146ae565b11612b6b5760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420636f6d706c6574696f6e207374617475730000000000000060448201526064016109f5565b6007810154600160b01b900460ff1615612c1f57600083815260136020526040812090836004811115612ba057612ba06146ae565b6004811115612bb157612bb16146ae565b815260208101919091526040016000205460ff16612c1f5760405162461bcd60e51b815260206004820152602560248201527f4d696c6573746f6e65206e6f7420617070726f7665642062792061756469746f6044820152641c881e595d60da1b60648201526084016109f5565b600083815260126020526040812054612c3a9060ff16611318565b90506000612c4784611318565b905060006064612c578484615099565b600088815260106020526040902054612c7091906150ac565b612c7a91906150c3565b60008781526012602052604090208054919250869160ff19166001836004811115612ca757612ca76146ae565b02179055506004856004811115612cc057612cc06146ae565b03612d28576000868152601160209081526040808320805460ff19166001908117909155600e8352818420546001600160a01b03168452600c835281842054808552600a909352908320600301805492939192909190612d21908490614fed565b9091555050505b6000868152600e60205260408082205490516001600160a01b039091169183156108fc02918491818181858888f19350505050158015612d6c573d6000803e3d6000fd5b50857f9038e8201f7dbe27b4bcc817a2873036b611a77262be4638500536e6815b57978287604051612d9f9291906150d7565b60405180910390a2612dec600f6000888152602001908152602001600020546040518060400160405280601081526020016f1410565351539517d49153115054d15160821b81525061446e565b50505050612df960018055565b5050565b6060600060606000806000806000806003548a1115612e2e5760405162461bcd60e51b81526004016109f590614eaf565b60008a815260086020908152604080832081516101608101835281546001600160a01b031681526001820154938101939093526002810180549192840191612e7590614e05565b80601f0160208091040260200160405190810160405280929190818152602001828054612ea190614e05565b8015612eee5780601f10612ec357610100808354040283529160200191612eee565b820191906000526020600020905b815481529060010190602001808311612ed157829003601f168201915b50505050508152602001600382018054612f0790614e05565b80601f0160208091040260200160405190810160405280929190818152602001828054612f3390614e05565b8015612f805780601f10612f5557610100808354040283529160200191612f80565b820191906000526020600020905b815481529060010190602001808311612f6357829003601f168201915b5050509183525050600482015460208201526005820154604082015260068201546060820152600782015460ff8082161515608084015260a090920191610100909104166002811115612fd557612fd56146ae565b6002811115612fe657612fe66146ae565b81526020016007820160029054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016007820160169054906101000a900460ff161515151581525050905080606001518160c0015182604001518360a001518460e00151856020015186610100015187600001518860800151995099509950995099509950995099509950509193959799909294969850565b600061308e6145a5565b6005805490600061309e83614e4f565b909155505060008281526009602090815260408083208684526008909252909120600781015460ff16151560011461310d5760405162461bcd60e51b8152602060048201526012602482015271141c9bda9958dd08139bdd08141bdcdd195960721b60448201526064016109f5565b80546001600160a01b031633146131725760405162461bcd60e51b815260206004820152602360248201527f4f6e6c792070726f6a6563742063726561746f722063616e20617761726420626044820152621bdb9960ea1b60648201526084016109f5565b816003015434146131c55760405162461bcd60e51b815260206004820152601960248201527f4d7573742073656e642066756c6c2062696420616d6f756e740000000000000060448201526064016109f5565b60028201546001600160a01b03166000908152600c60209081526040808320548352600a90915290206004015460ff16156132425760405162461bcd60e51b815260206004820152601e60248201527f53656c65637465642062696464657220697320626c61636b6c6973746564000060448201526064016109f5565b6002820154600580546000908152600e6020908152604080832080546001600160a01b0319166001600160a01b039096169590951790945582548252600f81528382208990558254825260118152838220805460ff19908116909155835483526012825284832080549091169055600386015492548252601090529182208190556064906132d19060146150ac565b6132db91906150c3565b60028401546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015613318573d6000803e3d6000fd5b5060058301805460ff1916600117905560028301546003840154604080516001600160a01b0390931683526020830191909152810182905286907fcc761dea67d3ed7501831391a5b0f6be67778c11bc18cb0bc7eb8d2019253bb19060600160405180910390a26133ad866040518060400160405280600c81526020016b1093d39117d055d05491115160a21b81525061446e565b50600701805460ff19169055505060018055805b92915050565b6060601c6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156134e057600084815260209081902060408051606081019091526003850290910180546001600160a01b03168252600181018054929391929184019161344590614e05565b80601f016020809104026020016040519081016040528092919081815260200182805461347190614e05565b80156134be5780601f10613493576101008083540402835291602001916134be565b820191906000526020600020905b8154815290600101906020018083116134a157829003601f168201915b50505050508152602001600282015481525050815260200190600101906133fc565b505050509050919050565b6000823383604051602001613502939291906150eb565b60408051601f1981840301815291815281516020928301206000818152601a8452828120805460ff19166001179055601990935291209091506135458382614f2d565b50827f9387a67c118c0d96e34edb1836eeeb497f37c38bc114dc63dc66c1deb019972f8260405161357891815260200190565b60405180910390a26122ac836040518060400160405280601381526020017210d3d4949554151253d397d4915413d4951151606a1b81525061446e565b6135bd614528565b6000828152600d60205260409020600581015460ff161561361b5760405162461bcd60e51b8152602060048201526018602482015277111a5cdc1d5d1948185b1c9958591e481c995cdbdb1d995960421b60448201526064016109f5565b60038101546001600160a01b0316156136765760405162461bcd60e51b815260206004820152601960248201527f4d65646961746f7220616c72656164792061737369676e65640000000000000060448201526064016109f5565b6003810180546001600160a01b0319166001600160a01b03841690811790915560405190815283907ffe47a7b6d774b16667067d1b3ec619c5932345a4a17a0795732fdf9426e366cc9060200160405180910390a26122ac600f600083600101548152602001908152602001600020546040518060400160405280601181526020017013515112505513d497d054d4d251d39151607a1b81525061446e565b6000828152600e60205260409020546001600160a01b03166137495760405162461bcd60e51b81526004016109f590615040565b60008281526011602052604081205460ff16600281111561376c5761376c6146ae565b146137b95760405162461bcd60e51b815260206004820152601d60248201527f50726f6a656374206e6f7420696e20617070726f76656420737461746500000060448201526064016109f5565b6000828152600f602090815260408083205483526008909152902060078101546201000090046001600160a01b031633146138405760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061737369676e65642061756469746f722063616e20617070726f766044820152606560f81b60648201526084016109f5565b60008381526012602052604090205460ff166004811115613863576138636146ae565b826004811115613875576138756146ae565b116138b65760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206d696c6573746f6e6560781b60448201526064016109f5565b60008381526013602052604081206001918460048111156138d9576138d96146ae565b60048111156138ea576138ea6146ae565b815260200190815260200160002060006101000a81548160ff021916908315150217905550827f366cfc0ceb7ff5abe6877a6b905e43a50db357b10cfee9c848f9afa5e0d2eb928360405161393f9190614c4f565b60405180910390a26122ac600f600085815260200190815260200160002054604051806040016040528060128152602001711352531154d513d39157d054141493d5915160721b81525061446e565b601c60205281600052604060002081815481106139aa57600080fd5b6000918252602090912060039091020180546001820180546001600160a01b0390921694509192506139db90614e05565b80601f0160208091040260200160405190810160405280929190818152602001828054613a0790614e05565b8015613a545780601f10613a2957610100808354040283529160200191613a54565b820191906000526020600020905b815481529060010190602001808311613a3757829003601f168201915b5050505050908060020154905083565b613a6c614528565b6001600160a01b03811660009081526015602052604090205460ff1615613ad55760405162461bcd60e51b815260206004820152601a60248201527f41756469746f7220616c7265616479207265676973746572656400000000000060448201526064016109f5565b6001600160a01b03166000818152601560205260408120805460ff19166001908117909155601d805491820181559091527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0180546001600160a01b0319169091179055565b6000828152600d6020526040902060038101546001600160a01b03163314613bb05760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061737369676e6564206d65646961746f722063616e207265736f6c604482015261766560f01b60648201526084016109f5565b600581015460ff1615613c005760405162461bcd60e51b8152602060048201526018602482015277111a5cdc1d5d1948185b1c9958591e481c995cdbdb1d995960421b60448201526064016109f5565b600581018054600160ff1982168117835584929161ffff191617610100836003811115613c2f57613c2f6146ae565b02179055506001826003811115613c4857613c486146ae565b03613cb95760018101546000908152600e60209081526040808320546001600160a01b03168352600c825280832054808452600a9092529091206003015415613cb3576000818152600a60205260408120600301805460019290613cad908490615099565b90915550505b50613cee565b6002826003811115613ccd57613ccd6146ae565b03613cee5760018101546000908152601160205260409020805460ff191690555b827f2ffcfee146bc0d5ff304c6b65111a0d485af9456dc64eee7d66ebdcc90b223ea83604051613d1e919061512a565b60405180910390a26122ac600f600083600101548152602001908152602001600020546040518060400160405280601081526020016f111254d415551157d49154d3d315915160821b81525061446e565b613d77614528565b6001600160a01b03811660009081526015602052604090205460ff16613dd85760405162461bcd60e51b8152602060048201526016602482015275105d591a5d1bdc881b9bdd081c9959da5cdd195c995960521b60448201526064016109f5565b6001600160a01b0381166000908152601560205260408120805460ff191690555b601d54811015612df957816001600160a01b0316601d8281548110613e2057613e20615000565b6000918252602090912001546001600160a01b031603613eeb57601d8054613e4a90600190615099565b81548110613e5a57613e5a615000565b600091825260209091200154601d80546001600160a01b039092169183908110613e8657613e86615000565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601d805480613ec557613ec5615138565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80613ef581614e4f565b915050613df9565b600081815260086020526040902080546001600160a01b03163314613f645760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c792063726561746f722063616e2061737369676e2061756469746f720060448201526064016109f5565b601d54613fb35760405162461bcd60e51b815260206004820152601e60248201527f4e6f20617070726f7665642061756469746f727320617661696c61626c65000060448201526064016109f5565b6007810154600160b01b900460ff161561400f5760405162461bcd60e51b815260206004820152601860248201527f41756469746f7220616c72656164792061737369676e6564000000000000000060448201526064016109f5565b601d5460405160009190614050904290449033908890602001938452602084019290925260601b6001600160601b0319166040830152605482015260740190565b6040516020818303038152906040528051906020012060001c614073919061502c565b90506000601d828154811061408a5761408a615000565b6000918252602091829020015460078501805460ff60b01b19620100006001600160a01b039094169384021662010000600160b81b031990911617600160b01b17905560405181815290925085917fa726f44c951dc5b9682833688ff307aa831c8736f8edf5a12bcb962a5a6c3d09910160405180910390a2611fe5846040518060400160405280601081526020016f105551125513d497d054d4d251d3915160821b81525061446e565b6060600060015b600354811161417f5760008181526008602052604090206007015460ff161561416d578161416981614e4f565b9250505b8061417781614e4f565b91505061413c565b5060008167ffffffffffffffff81111561419b5761419b614765565b6040519080825280602002602001820160405280156141d457816020015b6141c16145cf565b8152602001906001900390816141b95790505b509050600060015b600354811161442a5760008181526008602052604090206007015460ff16156144185760008181526008602090815260409182902082516101608101845281546001600160a01b03168152600182015492810192909252600281018054929391929184019161424a90614e05565b80601f016020809104026020016040519081016040528092919081815260200182805461427690614e05565b80156142c35780601f10614298576101008083540402835291602001916142c3565b820191906000526020600020905b8154815290600101906020018083116142a657829003601f168201915b505050505081526020016003820180546142dc90614e05565b80601f016020809104026020016040519081016040528092919081815260200182805461430890614e05565b80156143555780601f1061432a57610100808354040283529160200191614355565b820191906000526020600020905b81548152906001019060200180831161433857829003601f168201915b5050509183525050600482015460208201526005820154604082015260068201546060820152600782015460ff8082161515608084015260a0909201916101009091041660028111156143aa576143aa6146ae565b60028111156143bb576143bb6146ae565b8152600791909101546201000081046001600160a01b03166020830152600160b01b900460ff16151560409091015283518490849081106143fe576143fe615000565b6020026020010181905250818061441490614e4f565b9250505b8061442281614e4f565b9150506141dc565b50909392505050565b61443b614528565b6001600160a01b03811661446557604051631e4fbdf760e01b8152600060048201526024016109f5565b61142081614555565b6000828152601c602090815260408083208151606081018352338152808401868152429382019390935281546001808201845592865293909420845160039094020180546001600160a01b0319166001600160a01b039094169390931783559051908201906144dd9082614f2d565b50604082015181600201555050817fba7e9a25519687065d49814c75a4208fc85d81d4cfba5f3198a89cd07701616a823360405161451c92919061514e565b60405180910390a25050565b6000546001600160a01b0316331461150d5760405163118cdaa760e01b81523360048201526024016109f5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036145c857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60405180610160016040528060006001600160a01b0316815260200160008152602001606081526020016060815260200160008152602001600081526020016000815260200160001515815260200160006002811115614631576146316146ae565b815260006020820181905260409091015290565b60006020828403121561465757600080fd5b5035919050565b60005b83811015614679578181015183820152602001614661565b50506000910152565b6000815180845261469a81602086016020860161465e565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600381106146d4576146d46146ae565b9052565b6001600160a01b038c81168252602082018c9052610160604083018190526000916147058483018e614682565b91508382036060850152614719828d614682565b92508a60808501528960a08501528860c085015287151560e08501526147436101008501886146c4565b94909416610120830152911515610140909101529a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261478c57600080fd5b813567ffffffffffffffff808211156147a7576147a7614765565b604051601f8301601f19908116603f011681019082821181831017156147cf576147cf614765565b816040528381528660208588010111156147e857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561481d57600080fd5b83359250602084013567ffffffffffffffff81111561483b57600080fd5b6148478682870161477b565b925050604084013590509250925092565b80356001600160a01b038116811461486f57600080fd5b919050565b60006020828403121561488657600080fd5b61488f82614858565b9392505050565b86815285602082015260018060a01b038516604082015283606082015260c0608082015260006148c960c0830185614682565b905082151560a0830152979650505050505050565b600080604083850312156148f157600080fd5b50508035926020909101359150565b80356005811061486f57600080fd5b60006020828403121561492157600080fd5b61488f82614900565b600481106146d4576146d46146ae565b878152602081018790526001600160a01b0386811660408301528516606082015260e06080820181905260009061497390830186614682565b905083151560a083015261498a60c083018461492a565b98975050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614a8f57888303603f19018552815180516001600160a01b0316845261016088820151898601528782015181898701526149fd82870182614682565b91505060608083015186830382880152614a178382614682565b6080858101519089015260a0808601519089015260c0808601519089015260e0808601511515908901526101008086015191945092509050614a5b828801826146c4565b5050610120828101516001600160a01b031690860152610140918201511515919094015293860193908601906001016149bd565b509098975050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614a8f57888303603f190185528151805184528781015188850152868101516001600160a01b0316878501526060808201519085015260808082015160c08287018190529190614b1a83880182614682565b60a09485015115159790940196909652505094870194925090860190600101614ac4565b60008060408385031215614b5157600080fd5b614b5a83614858565b946020939093013593505050565b60008060408385031215614b7b57600080fd5b82359150602083013567ffffffffffffffff811115614b9957600080fd5b614ba58582860161477b565b9150509250929050565b600080600080600060a08688031215614bc757600080fd5b853567ffffffffffffffff80821115614bdf57600080fd5b614beb89838a0161477b565b96506020880135915080821115614c0157600080fd5b50614c0e8882890161477b565b9450506040860135925060608601359150608086013560038110614c3157600080fd5b809150509295509295909350565b600581106146d4576146d46146ae565b602081016133c18284614c3f565b60008060408385031215614c7057600080fd5b82359150614c8060208401614900565b90509250929050565b6000610120808352614c9d8184018d614682565b90508a60208401528281036040840152614cb7818b614682565b91505087606083015286151560808301528560a0830152614cdb60c08301866146c4565b6001600160a01b039390931660e08201526101000152979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614a8f57888303603f19018552815180516001600160a01b0316845287810151606089860181905290614d5c82870182614682565b92890151958901959095525094870194925090860190600101614d23565b60008060408385031215614d8d57600080fd5b82359150614c8060208401614858565b6001600160a01b0384168152606060208201819052600090614dc190830185614682565b9050826040830152949350505050565b60008060408385031215614de457600080fd5b82359150602083013560048110614dfa57600080fd5b809150509250929050565b600181811c90821680614e1957607f821691505b6020821081036117d957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614e6157614e61614e39565b5060010190565b60208082526027908201527f50726f6a65637420646f6573206e6f74206578697374206f72206973206e6f74604082015266081c1bdcdd195960ca1b606082015260800190565b602080825260169082015275141c9bda9958dd08191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b601f8211156122ac57600081815260208120601f850160051c81016020861015614f065750805b601f850160051c820191505b81811015614f2557828155600101614f12565b505050505050565b815167ffffffffffffffff811115614f4757614f47614765565b614f5b81614f558454614e05565b84614edf565b602080601f831160018114614f905760008415614f785750858301515b600019600386901b1c1916600185901b178555614f25565b600085815260208120601f198616915b82811015614fbf57888601518255948401946001909101908401614fa0565b5085821015614fdd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156133c1576133c1614e39565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261503b5761503b615016565b500690565b602080825260139082015272109bdb9908191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b6001600160a01b0384168152602081018390526060810161509160408301846146c4565b949350505050565b818103818111156133c1576133c1614e39565b80820281158282048414176133c1576133c1614e39565b6000826150d2576150d2615016565b500490565b8281526040810161488f6020830184614c3f565b8381526bffffffffffffffffffffffff198360601b1660208201526000825161511b81603485016020870161465e565b91909101603401949350505050565b602081016133c1828461492a565b634e487b7160e01b600052603160045260246000fd5b6040815260006151616040830185614682565b905060018060a01b0383166020830152939250505056fea26469706673582212207588c0c44e4d166e3f50703ac385c8a3bbc792f4e1258c38630a1ff4f6fc709764736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "BuidlGuidl",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 352,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 355,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "projectId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 358,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 361,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 364,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "disputeCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 475,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidderCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 480,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "projects",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Project)388_storage)"
      },
      {
        "astId": 485,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bids",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Bid)401_storage)"
      },
      {
        "astId": 490,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidders",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Bidder)412_storage)"
      },
      {
        "astId": 495,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "projectBids",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 499,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bidderIds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 504,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "disputes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Dispute)454_storage)"
      },
      {
        "astId": 508,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondObligor",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 512,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondProjectId",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 516,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondAmount",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 521,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondStatus",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_enum(ProjectStatus)458)"
      },
      {
        "astId": 526,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondCompletion",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_enum(ProjectCompletion)468)"
      },
      {
        "astId": 533,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondMilestoneApproved",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(ProjectCompletion)468,t_bool))"
      },
      {
        "astId": 539,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "hasBidded",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 543,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "approvedAuditors",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 548,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "projectAuditors",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 552,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "evaluatedbids",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 556,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "bondWinners",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 560,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "reportDescriptions",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 564,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "whistleblowerReports",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 568,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "whistleblowerRewards",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 581,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "transparencyLogs",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_uint256,t_array(t_struct(LogEntry)575_storage)dyn_storage)"
      },
      {
        "astId": 612,
        "contract": "contracts/TrustChain.sol:TrustChain",
        "label": "approvedAuditorsList",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LogEntry)575_storage)dyn_storage": {
        "base": "t_struct(LogEntry)575_storage",
        "encoding": "dynamic_array",
        "label": "struct TrustChain.LogEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(DisputeOutcome)473": {
        "encoding": "inplace",
        "label": "enum TrustChain.DisputeOutcome",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectClassfication)462": {
        "encoding": "inplace",
        "label": "enum TrustChain.ProjectClassfication",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectCompletion)468": {
        "encoding": "inplace",
        "label": "enum TrustChain.ProjectCompletion",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectStatus)458": {
        "encoding": "inplace",
        "label": "enum TrustChain.ProjectStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ProjectCompletion)468,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(ProjectCompletion)468",
        "label": "mapping(enum TrustChain.ProjectCompletion => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(LogEntry)575_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.LogEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LogEntry)575_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(ProjectCompletion)468)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum TrustChain.ProjectCompletion)",
        "numberOfBytes": "32",
        "value": "t_enum(ProjectCompletion)468"
      },
      "t_mapping(t_uint256,t_enum(ProjectStatus)458)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum TrustChain.ProjectStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ProjectStatus)458"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(ProjectCompletion)468,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum TrustChain.ProjectCompletion => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(ProjectCompletion)468,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Bid)401_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)401_storage"
      },
      "t_mapping(t_uint256,t_struct(Bidder)412_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.Bidder)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidder)412_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)454_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)454_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)388_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrustChain.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)388_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)401_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.Bid",
        "members": [
          {
            "astId": 390,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 392,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 394,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidder",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 396,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 398,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "proposalIPFHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 400,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "accepted",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Bidder)412_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.Bidder",
        "members": [
          {
            "astId": 403,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 405,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bidderAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 407,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "totalBids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 409,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "reputationScore",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 411,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "blacklisted",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Dispute)454_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.Dispute",
        "members": [
          {
            "astId": 440,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "disputeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 442,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "bondId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 444,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 446,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "mediator",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 448,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "evidence",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 450,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "resolved",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 453,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "outcome",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(DisputeOutcome)473"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(LogEntry)575_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.LogEntry",
        "members": [
          {
            "astId": 570,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "actor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 572,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "action",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 574,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Project)388_storage": {
        "encoding": "inplace",
        "label": "struct TrustChain.Project",
        "members": [
          {
            "astId": 366,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 368,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 370,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 372,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "title",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 374,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "timePeriod",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 376,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 378,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "budget",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 380,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "posted",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 383,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "projectType",
            "offset": 1,
            "slot": "7",
            "type": "t_enum(ProjectClassfication)462"
          },
          {
            "astId": 385,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "auditor",
            "offset": 2,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 387,
            "contract": "contracts/TrustChain.sol:TrustChain",
            "label": "hasAuditor",
            "offset": 22,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}